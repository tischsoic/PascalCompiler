package grammar;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement.*;
import javax.xml.stream.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;

parser code {:
    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at "+cur_token);
    }
    public static void newScope(){
	typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
	typenames.pop();
    }
    public static boolean lookupType(String name){
	for (HashSet<String> scope: typenames)
	    if (scope.contains(name)) return true;
	return false;
    }
    public static void addType(String name){
	typenames.peek().add(name);
    }
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
	super(lex,sf);
    }
:};

terminal AND, ARRAY, BEGIN, CASE, CONST, DIV, DO, DOWNTO, ELSE, END, FILE, FOR, FUNCTION, GOTO, IF, IN;
terminal LABEL, MOD, NIL, NOT, OF, OR, PACKED, PROCEDURE, PROGRAM, RECORD, REPEAT, SET, THEN, TO, TYPE;
terminal UNTIL, VAR, WHILE, WITH, ASSIGN, PLUS, MINUS, TIMES, DIVIDE, EQ, NE, LT, GT, LE, GE, DOT, LEFT;
terminal RIGHT, COMMA, SEMICOLON, COLON, DOTDOT, LEFTSQ, RIGHTSQ, PTR, IDENT, BOOLCONST, INTCONST, REALCONST;
terminal CHARCONST, STRINGCONST;
terminal READLN, READ, WRITE, WRITELN;

non terminal File, Program, Module, ProgramHeading, Block, LabelDeclarationPart, LabelDecl, LabelList, LabelDeclaration, ConstantDeclarationPart;
non terminal ConstantDecl, ConstDeclarationList, ConstDeclr, ConstantList, Constant, TypeDefinitionPart, TypeDecl, TypeDeclrList;
non terminal TypeDeclr, Type, SimpleType, ScalarType, SubrangeType, StructuredType, UnpackedType, ArrayType, SimpleTypeList;
non terminal RecordType, FieldList, FieldDeclList, FieldDecl, VariantFields, VariantList, Variant, SetType, FileType;
non terminal PointerType, VariableDeclarationPart, VarDecl, VarDeclrList, VarDeclr, IdentList, ProcedureAndFunctionDeclarationPart, ProcDeclr, FuncDeclr;
non terminal ProcHeader, FuncHeader, FormalParamDeclList, FormalParamDecl, Stmt, UnlabelledStmt, SimpleStmt, StructuredStmt;
non terminal Variable, WriteExprList, ExprList, WriteExpr, Expr, SimpleExpr, Term, Factor, Invocation, Set, ElementList;
non terminal Element, StatementPart, StmtList, ConditionalStmt, CaseStmtList, CaseStmt, LoopStmt, WithStmt, VariableList;

precedence nonassoc ELSE;

start with File;

File ::=
        Program
    |   Module
    ;

Module ::=
        ConstantDeclarationPart
        TypeDefinitionPart
        VariableDeclarationPart
        ProcedureAndFunctionDeclarationPart
    ;

Program ::=
		ProgramHeading Block DOT
	;

ProgramHeading::=
        PROGRAM IDENT SEMICOLON
	|   PROGRAM IDENT LEFT IdentList RIGHT SEMICOLON
	;

Block::=
		LabelDeclarationPart
		ConstantDeclarationPart
		TypeDefinitionPart
		VariableDeclarationPart
		ProcedureAndFunctionDeclarationPart
		StatementPart
	;

LabelDeclarationPart::=
		/* Empty */
	|	LABEL LabelList SEMICOLON
	;

LabelList::=
		LabelDeclaration
	|	LabelList COMMA LabelDeclaration
	;

LabelDeclaration::=
		INTCONST
	;
	
ConstantDeclarationPart::=
		/* Empty */
	|	CONST ConstDeclarationList SEMICOLON
	;
	
ConstDeclarationList::=
		ConstDeclr
	|	ConstDeclarationList COMMA ConstDeclr
	;

ConstDeclr::=
		IDENT EQ Constant
	;

ConstantList::=
		Constant
	|	ConstantList COMMA Constant
	;

Constant::=
		INTCONST
	|	PLUS INTCONST
	|	MINUS INTCONST
	|	REALCONST
	|	PLUS REALCONST
	|	MINUS REALCONST
	|	IDENT
	|	PLUS IDENT
	|	MINUS IDENT
	|	STRINGCONST
	;

TypeDefinitionPart::=
		/* Empty */
	|	TypeDecl
	;

TypeDecl::=
		TYPE TypeDeclrList SEMICOLON
	;

TypeDeclrList::=
		TypeDeclr
	|	TypeDeclrList SEMICOLON TypeDeclr
	;

TypeDeclr::=
		IDENT EQ Type
	;

Type::=
		SimpleType
	|	StructuredType
	|	PointerType
	;
	
SimpleType::=
		IDENT
	|	ScalarType
	|	SubrangeType
	;

ScalarType::=
		LEFT IdentList RIGHT
	;

SubrangeType::=
		Constant DOTDOT Constant
	;

StructuredType::=
		UnpackedType
	|	PACKED UnpackedType
	;

UnpackedType::=
		ArrayType
	|	RecordType
	|	SetType
	|	FileType
	;

ArrayType::=
		ARRAY LEFTSQ SimpleTypeList RIGHTSQ OF Type
	;

SimpleTypeList::=
		SimpleType
	|	SimpleTypeList COMMA SimpleType
	;

RecordType::=
		RECORD FieldList END
	;

FieldList::=
		FieldDeclList
	|	FieldDeclList SEMICOLON VariantFields
	;
	
FieldDeclList::=
		/* Empty */
	|	FieldDeclList SEMICOLON FieldDecl
	;

FieldDecl::=
		/* Empty */
	|	IdentList COLON Type
	;

VariantFields::=
		CASE IDENT COLON IDENT OF VariantList
	|   CASE IDENT OF VariantList
	;

VariantList::=
		Variant
	|   VariantList SEMICOLON Variant
	;

Variant::=
		/* Empty */
	|	ConstantList COLON LEFT FieldList RIGHT
	;

SetType::=
		SET OF SimpleType
	;
	
FileType::=
		FILE OF Type
	;
	
PointerType::=
		PTR IDENT
	;

VariableDeclarationPart::=
		/* Empty */
	|	VarDecl
	;

VarDecl::=
		VAR VarDeclrList SEMICOLON
	;

VarDeclrList::=
		/* Empty */
	|	VarDeclrList VarDeclr
	;

VarDeclr::=
		IdentList COLON Type SEMICOLON
	;

IdentList::=
		/* Empty */
	|	IDENT
	|	IdentList COMMA IDENT 
	;

ProcedureAndFunctionDeclarationPart::=
		/* Empty */
	|	ProcedureAndFunctionDeclarationPart ProcDeclr SEMICOLON
	|	ProcedureAndFunctionDeclarationPart FuncDeclr SEMICOLON
	;

ProcDeclr::=
		ProcHeader Block
	;

FuncDeclr::=
		FuncHeader Block
	;

ProcHeader::=
		PROCEDURE IDENT SEMICOLON
	|	PROCEDURE IDENT LEFT FormalParamDeclList RIGHT SEMICOLON
	;

FuncHeader::=
		FUNCTION IDENT COLON IDENT SEMICOLON
	|	FUNCTION IDENT LEFT FormalParamDeclList RIGHT COLON IDENT SEMICOLON
	;

FormalParamDeclList::=
		FormalParamDecl
	|	FormalParamDeclList SEMICOLON FormalParamDecl
	;

FormalParamDecl::=
		VAR IdentList COLON Type
	|	IdentList COLON Type
	|	FUNCTION IdentList COLON Type
	|	PROCEDURE IdentList
	;

Stmt::=
		UnlabelledStmt
	|	INTCONST COLON UnlabelledStmt
	;

UnlabelledStmt::=
		SimpleStmt
	|	StructuredStmt
	;

SimpleStmt::=
		Variable ASSIGN Expr
	|	Invocation
	|	WRITE LEFT WriteExprList RIGHT
	|	WRITELN LEFT WriteExprList RIGHT
	|	IDENT
	|	GOTO INTCONST
	|	/* Empty */
	;

StructuredStmt::=
		StatementPart
	|	ConditionalStmt
	|	LoopStmt
	|	WithStmt
	;

Variable::=
		IDENT
	|	Variable LEFTSQ ExprList RIGHTSQ
	|	Variable DOT IDENT
	|	Variable PTR
	;

WriteExprList::=
		WriteExpr
	|	WriteExprList COMMA WriteExpr
	;

WriteExpr::=
		Expr
	|	Expr COLON Expr
	|	Expr COLON Expr COLON Expr
	;
	
ExprList::=
		Expr
	|	ExprList COMMA Expr
	;
	
Expr::=
		SimpleExpr
	|	SimpleExpr EQ SimpleExpr
	|	SimpleExpr NE SimpleExpr
	|	SimpleExpr LT SimpleExpr
	|	SimpleExpr LE SimpleExpr
	|	SimpleExpr GT SimpleExpr
	|	SimpleExpr GE SimpleExpr
	|	SimpleExpr IN SimpleExpr
	;

SimpleExpr::=
		Term
	|	PLUS Term
	|	MINUS Term
	|	SimpleExpr PLUS Term
	|	SimpleExpr MINUS Term
	|	SimpleExpr OR Term
	;

Term::=
		Factor
	|	Term TIMES Factor
	|	Term DIVIDE Factor
	|	Term DIV Factor
	|	Term MOD Factor
	|	Term AND Factor
	;

Factor::=
		Variable
	|	BOOLCONST
	|	INTCONST
	|	REALCONST
	|	CHARCONST
	|	STRINGCONST
	|	NIL
	|	LEFT Expr RIGHT
	|	Invocation
	|	Set
	|	NOT Factor
	;

Invocation::=
		IDENT LEFT ExprList RIGHT
	;

Set::=
		LEFTSQ ElementList RIGHTSQ
	|	LEFTSQ RIGHTSQ
	;

ElementList::=
		Element
	|	ElementList COMMA Element
	;

Element::=
		Expr
	|	Expr DOTDOT Expr
	;

StatementPart::=
		BEGIN StmtList END
	;

StmtList::=
		Stmt
	|	StmtList SEMICOLON Stmt
	;

ConditionalStmt::=
		IF Expr THEN Stmt
	|	IF Expr THEN Stmt ELSE Stmt
	|	CASE Expr OF CaseStmtList END
	;

CaseStmtList::=
		CaseStmt
	|	CaseStmtList SEMICOLON CaseStmt
	;

CaseStmt::=
		/* empty */
	|	ConstantList COLON Stmt
	;

LoopStmt::=
		WHILE Expr DO Stmt
	|	REPEAT StmtList UNTIL Expr
	|	FOR IDENT ASSIGN Expr TO Expr DO Stmt
	|	FOR IDENT ASSIGN Expr DOWNTO Expr DO Stmt
	;


WithStmt::=
		WITH VariableList DO Stmt
	;

VariableList::=
		Variable
	|	VariableList COMMA Variable
	;

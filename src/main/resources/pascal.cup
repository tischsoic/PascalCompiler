/* Minijava Grammar */
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;

import javax.xml.transform.*;
import javax.xml.transform.stream.*;

parser code {: 
  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    }
:}; 

terminal AND, ARRAY, BEGIN, CASE, CONST, DIV, DO, DOWNTO, ELSE, END, FILE, FOR, FUNCTION, GOTO, IF, IN;
terminal LABEL, MOD, NIL, NOT, OF, OR, PACKED, PROCEDURE, PROGRAM, RECORD, REPEAT, SET, THEN, TO, TYPE, USES;
terminal UNTIL, VAR, WHILE, WITH, ASSIGN, PLUS, MINUS, TIMES, DIVIDE, EQ, NE, LT, GT, LE, GE, DOT, LEFT;
terminal RIGHT, COMMA, SEMICOLON, COLON, DOTDOT, LEFTSQ, RIGHTSQ, PTR;
terminal READLN, READ, WRITE, WRITELN;
terminal String IDENT;
terminal Boolean BOOLCONST;
terminal Integer INTCONST;
terminal Double REALCONST;
terminal Character CHARCONST;
terminal String STRINGCONST;

non terminal File, Program, Module, ProgramHeading, Block, LabelDeclarationPart, LabelList, LabelDeclaration, ConstantDeclarationPart, Extern;
non terminal ConstDeclarationList, ConstDeclr, ConstantList, Constant, TypeDefinitionPart, TypeDecl, TypeDeclrList;
non terminal TypeDeclr, Type, SimpleType, ScalarType, SubrangeType, StructuredType, UnpackedType, ArrayType, SimpleTypeList;
non terminal RecordType, FieldList, FieldDeclList, FieldDecl, VariantFields, VariantList, Variant, SetType, FileType;
non terminal PointerType, VariableDeclarationPart, VarDecl, VarDeclrList, VarDeclr, IdentList, ProcedureAndFunctionDeclarationPart, ProcDeclr, FuncDeclr;
non terminal ProcHeader, FuncHeader, FormalParamDeclList, FormalParamDecl, Stmt, UnlabelledStmt, SimpleStmt, StructuredStmt;
non terminal Variable, WriteExprList, ExprList, WriteExpr, Expr, SimpleExpr, Term, Factor, Invocation, Set, ElementList;
non terminal Element, StatementPart, StmtList, ConditionalStmt, CaseStmtList, CaseStmt, LoopStmt, WithStmt, VariableList;

precedence nonassoc ELSE;

File ::=
        Program:prog
    |   Module:mod
    ;

Module ::=
        ConstantDeclarationPart:constant_decl_part
        TypeDefinitionPart:type_def_part
        VariableDeclarationPart:var_decl_part
        ProcedureAndFunctionDeclarationPart:proc_fun_decl_part
    ;

Program ::=
		ProgramHeading:prog_head Block:block DOT
	;

ProgramHeading::=
        PROGRAM IDENT:identifier SEMICOLON
	|   PROGRAM IDENT:identifier LEFT IdentList:ident_list RIGHT SEMICOLON
	;

Block::=
		Extern:ext
		LabelDeclarationPart:label_decl_part
		ConstantDeclarationPart:constant_decl_part
		TypeDefinitionPart:type_def_part
		VariableDeclarationPart:var_decl_part
		ProcedureAndFunctionDeclarationPart:proc_fun_decl_part
		StatementPart:stmt_part
	;

/* Blok "uses" */
Extern::=
		/* Empty */
	|	USES IdentList:ident_list SEMICOLON
	;

LabelDeclarationPart::=
		/* Empty */
	|	LABEL LabelList:label_list SEMICOLON
	;

LabelList::=
		LabelDeclaration:label_decl
	|	LabelList:label_list COMMA LabelDeclaration:label_decl
	;

LabelDeclaration::=
		INTCONST:int_constant
	;
	
ConstantDeclarationPart::=
		/* Empty */
	|	CONST ConstDeclarationList:constant_decl_list
	;
	
ConstDeclarationList::=
		ConstDeclr:constant_decl
	|	ConstDeclarationList:constant_decl_lsit ConstDeclr:constant_decl
	;

ConstDeclr::=
		IDENT:identifier EQ:op Constant:constant SEMICOLON
	;

ConstantList::=
		Constant:constant
	|	ConstantList:constant_list COMMA Constant:constant
	;

Constant::=
		INTCONST:int_constant
	|	PLUS INTCONST:plus_int_constant
	|	MINUS INTCONST:minus_int_constant
	|	REALCONST:real_conts
	|	PLUS REALCONST:plus_real_constant
	|	MINUS REALCONST:minus_real_constant
	|	IDENT:identifier
	|	PLUS IDENT:plus_identifier
	|	MINUS IDENT:minus_identifier
	|	STRINGCONST:string_constant
	;

TypeDefinitionPart::=
		/* Empty */
	|	TypeDecl:type_decl
	;

TypeDecl::=
		TYPE TypeDeclrList:type_decl_list SEMICOLON
	;

TypeDeclrList::=
		TypeDeclr:type_decl
	|	TypeDeclrList:type_decl_list SEMICOLON TypeDeclr:type_decl
	;

TypeDeclr::=
		IDENT:identifier EQ:op Type:type
	|	IDENT:identifier EQ:op Type:type LEFTSQ IDENT:identifier1 RIGHTSQ
	|	IDENT:identifier EQ:op Type:type LEFTSQ SubrangeType:subrange_type RIGHTSQ
	;

Type::=
		SimpleType:simple_type
	|	StructuredType:struct_type
	|	PointerType:ptr_type
	;
	
SimpleType::=
		IDENT:identifier
	|	ScalarType:scalar_type
	|	SubrangeType:subrange_type
	;

ScalarType::=
		LEFT IdentList:ident_list RIGHT
	;

SubrangeType::=
		Constant:constant DOTDOT Constant:constant1
	;

StructuredType::=
		UnpackedType:unpkg_type
	|	PACKED UnpackedType:unpkg_type
	;

UnpackedType::=
		ArrayType:array_type
	|	RecordType:record_type
	|	SetType:set_type
	|	FileType:file_type
	;

ArrayType::=
		ARRAY LEFTSQ SimpleTypeList:simple_type_list RIGHTSQ OF Type:type
	;

SimpleTypeList::=
		SimpleType:simple_type
	|	SimpleTypeList:simple_type COMMA SimpleType:simple_type1
	;

RecordType::=
		RECORD FieldList:field_list END
	;

FieldList::=
		FieldDeclList:field_decl_list
	|	FieldDeclList:field_decl_list SEMICOLON VariantFields:variant_fields
	;

FieldDeclList::=
		/* Empty */
	|	FieldDeclList:field_decl_list SEMICOLON FieldDecl:field_decl
	;

FieldDecl::=
		/* Empty */
	|	IdentList:ident_list COLON Type:type
	;

VariantFields::=
		CASE IDENT:identifier COLON IDENT:identifier1 OF VariantList:variant_list
	|   CASE IDENT:identifier OF VariantList:variant_list
	;

VariantList::=
		Variant:variant
	|   VariantList:variant_list SEMICOLON Variant:variant
	;

Variant::=
		/* Empty */
	|	ConstantList:constant_list COLON LEFT FieldList:field_list RIGHT
	;

SetType::=
		SET OF SimpleType:simple_type
	;

FileType::=
		FILE OF Type:type
	;

PointerType::=
		PTR IDENT:identifier
	;

VariableDeclarationPart::=
		/* Empty */
	|	VarDecl:var_decl
	;

VarDecl::=
		VAR VarDeclrList:vdl
	;

VarDeclrList::=
		/* Empty */
	|	VarDeclrList:var_decl_list VarDeclr:var_decl
	;

VarDeclr::=
		IdentList:ident_list COLON Type:type SEMICOLON
	;

IdentList::=
		/* Empty */
		IDENT:identifier
	|	IdentList:ident_list COMMA IDENT:identifier
	;

ProcedureAndFunctionDeclarationPart::=
		/* Empty */
	|	ProcedureAndFunctionDeclarationPart:proc_fun_decl_part ProcDeclr:proc_decl SEMICOLON
	|	ProcedureAndFunctionDeclarationPart:proc_fun_decl_part FuncDeclr:fun_decl SEMICOLON
	;

ProcDeclr::=
		ProcHeader:proc_header Block:block
	;

FuncDeclr::=
		FuncHeader:fun_header Block:block
	;

ProcHeader::=
		PROCEDURE IDENT:identifier SEMICOLON
	|	PROCEDURE IDENT:identifier LEFT FormalParamDeclList:formal_param_decl_list RIGHT SEMICOLON
	;

FuncHeader::=
		FUNCTION IDENT:identifier COLON IDENT:identifier1 SEMICOLON
	|	FUNCTION IDENT:identifier LEFT FormalParamDeclList:formal_param_decl_list RIGHT COLON IDENT:identifier1 SEMICOLON
	;

FormalParamDeclList::=
		FormalParamDecl:formal_param_decl
	|	FormalParamDeclList:formal_param_decl_list SEMICOLON FormalParamDecl:formal_param_decl
	;

FormalParamDecl::=
		VAR IdentList:ident_list COLON Type:type
	|	IdentList:ident_list COLON Type:type
	|	FUNCTION IdentList:ident_list COLON Type:type
	|	PROCEDURE IdentList:ident_list
	;

Stmt::=
		UnlabelledStmt:unlabel_stmt
	|	INTCONST:int_constant COLON UnlabelledStmt:unlabel_stmt
	;

UnlabelledStmt::=
		SimpleStmt:simple_stmt
	|	StructuredStmt:struct_stmt
	;

SimpleStmt::=
		Variable:var ASSIGN Expr:expr
	|	Invocation:invoc
	|	WRITE LEFT WriteExprList:write_expr_list RIGHT
	|	WRITELN LEFT WriteExprList:write_expr_list RIGHT
	|	READLN LEFT Variable:var RIGHT
	|	READ LEFT Variable:var RIGHT
	|	READLN
	|	READ
	|	WRITELN
	|	WRITE
	|	IDENT:identifier
	|	GOTO INTCONST:int_constant
	|	/* Empty */
	;

StructuredStmt::=
		StatementPart:stmt_part
	|	ConditionalStmt:cont_stmt
	|	LoopStmt:loop_stmt
	|	WithStmt:with_stmt
	;

Variable::=
		IDENT:identifier
	|	Variable:var LEFTSQ ExprList:expr_list RIGHTSQ
	|	Variable:var DOT IDENT:identifier
	|	Variable:var PTR
	;

WriteExprList::=
		WriteExpr:write_expr
	|	WriteExprList:write_expr_list COMMA WriteExpr:write_expr
	;

WriteExpr::=
		Expr:expr
	|	Expr:expr COLON Expr:expr1
	|	Expr:expr COLON Expr:expr1 COLON Expr:expr2
	;

ExprList::=
		Expr:expr
	|	ExprList:expr_list COMMA Expr:expr
	;

Expr::=
		SimpleExpr:simple_expr
	|	SimpleExpr:simple_expr EQ SimpleExpr:simple_expr1
	|	SimpleExpr:simple_expr NE SimpleExpr:simple_expr1
	|	SimpleExpr:simple_expr LT SimpleExpr:simple_expr1
	|	SimpleExpr:simple_expr LE SimpleExpr:simple_expr1
	|	SimpleExpr:simple_expr GT SimpleExpr:simple_expr1
	|	SimpleExpr:simple_expr GE SimpleExpr:simple_expr1
	|	SimpleExpr:simple_expr IN SimpleExpr:simple_expr1
	;

SimpleExpr::=
		Term:term
	|	PLUS Term:term
	|	MINUS Term:term
	|	SimpleExpr:simple_expr PLUS Term:term
	|	SimpleExpr:simple_expr MINUS Term:term
	|	SimpleExpr:simple_expr OR Term:term
	;

Term::=
		Factor:factor
	|	Term:term TIMES Factor:factor
	|	Term:term DIVIDE Factor:factor
	|	Term:term DIV Factor:factor
	|	Term:term MOD Factor:factor
	|	Term:term AND Factor:factor
	;

Factor::=
		Variable:var
	|	BOOLCONST:bool_constant
	|	INTCONST:int_constant
	|	REALCONST:real_cont
	|	CHARCONST:char_constant
	|	STRINGCONST:string_constant
	|	NIL:nil
	|	LEFT Expr:expr RIGHT
	|	Invocation:invoc
	|	Set:set
	|	NOT Factor:factor
	;

Invocation::=
		IDENT:identifier LEFT ExprList:expr_list RIGHT
	;

Set::=
		LEFTSQ ElementList:elem_list RIGHTSQ
	|	LEFTSQ RIGHTSQ
	;

ElementList::=
		Element:elem
	|	ElementList:elem_list COMMA Element:elem
	;

Element::=
		Expr:expr
	|	Expr:expr DOTDOT Expr:expr1
	;

StatementPart::=
		Begin StmtList:stmt_list END
	;

StmtList::=
		Stmt:stmt
	|	StmtList:stmt_list SEMICOLON Stmt:stmt
	;

ConditionalStmt::=
		IF Expr:expr THEN Stmt:stmt
	|	IF Expr:expr THEN Stmt:stmt ELSE Stmt:stmt1
	|	CASE Expr:expr OF CaseStmtList:case_stmt_list END
	;

CaseStmtList::=
		CaseStmt:case_stmt
	|	CaseStmtList:case_stmt_list SEMICOLON CaseStmt:case_stmt
	;

CaseStmt::=
		/* empty */
	|	ConstantList:constant_list COLON Stmt:stmt
	;

LoopStmt::=
		WHILE Expr:expr DO Stmt:stmt
	|	REPEAT StmtList:stmt_list UNTIL Expr:expr
	|	FOR IDENT:identifier ASSIGN Expr:expr TO Expr:expr1 DO Stmt:stmt
	|	FOR IDENT:identifier ASSIGN Expr:expr DOWNTO Expr:expr1 DO Stmt:stmt
	;


WithStmt::=
		WITH VariableList:var_list DO Stmt:stmt
	;

VariableList::=
		Variable:var
	|	VariableList:var_list COMMA Variable:var
	;


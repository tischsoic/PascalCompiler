
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\004\006\000\002\003\005\000\002\005\005" +
    "\000\002\005\010\000\002\006\011\000\002\013\002\000" +
    "\002\013\005\000\002\007\002\000\002\007\005\000\002" +
    "\010\003\000\002\010\005\000\002\011\003\000\002\012" +
    "\002\000\002\012\004\000\002\014\003\000\002\014\004" +
    "\000\002\015\006\000\002\016\003\000\002\016\005\000" +
    "\002\017\003\000\002\017\004\000\002\017\004\000\002" +
    "\017\003\000\002\017\004\000\002\017\004\000\002\017" +
    "\003\000\002\017\004\000\002\017\004\000\002\017\003" +
    "\000\002\020\002\000\002\020\003\000\002\021\005\000" +
    "\002\022\003\000\002\022\005\000\002\023\005\000\002" +
    "\023\010\000\002\023\010\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\005\000\002\027\005\000" +
    "\002\030\003\000\002\030\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\010\000\002\033\003\000\002\033\005\000\002\034\005" +
    "\000\002\035\003\000\002\035\005\000\002\036\002\000" +
    "\002\036\005\000\002\037\002\000\002\037\005\000\002" +
    "\040\010\000\002\040\006\000\002\041\003\000\002\041" +
    "\005\000\002\042\002\000\002\042\007\000\002\043\005" +
    "\000\002\044\005\000\002\045\004\000\002\046\002\000" +
    "\002\046\003\000\002\047\004\000\002\050\002\000\002" +
    "\050\004\000\002\051\006\000\002\052\003\000\002\052" +
    "\005\000\002\053\002\000\002\053\005\000\002\053\005" +
    "\000\002\054\004\000\002\055\004\000\002\056\005\000" +
    "\002\056\010\000\002\057\007\000\002\057\012\000\002" +
    "\060\003\000\002\060\005\000\002\061\006\000\002\061" +
    "\005\000\002\061\006\000\002\061\004\000\002\062\003" +
    "\000\002\062\005\000\002\063\003\000\002\063\003\000" +
    "\002\064\005\000\002\064\003\000\002\064\006\000\002" +
    "\064\006\000\002\064\006\000\002\064\006\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\004\000\002\064\002\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\066\003\000\002\066\006\000\002\066" +
    "\005\000\002\066\004\000\002\067\003\000\002\067\005" +
    "\000\002\071\003\000\002\071\005\000\002\071\007\000" +
    "\002\070\003\000\002\070\005\000\002\072\003\000\002" +
    "\072\005\000\002\072\005\000\002\072\005\000\002\072" +
    "\005\000\002\072\005\000\002\072\005\000\002\072\005" +
    "\000\002\073\003\000\002\073\004\000\002\073\004\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\074\003\000\002\074\005\000\002\074\005\000\002\074" +
    "\005\000\002\074\005\000\002\074\005\000\002\075\003" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\075\005\000\002\075\003\000\002\075\003\000\002\075" +
    "\004\000\002\076\006\000\002\077\005\000\002\077\004" +
    "\000\002\100\003\000\002\100\005\000\002\101\003\000" +
    "\002\101\005\000\002\102\005\000\002\103\003\000\002" +
    "\103\005\000\002\104\006\000\002\104\010\000\002\104" +
    "\007\000\002\105\003\000\002\105\005\000\002\106\002" +
    "\000\002\106\005\000\002\107\006\000\002\107\006\000" +
    "\002\107\012\000\002\107\012\000\002\110\006\000\002" +
    "\111\003\000\002\111\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\020\002\ufff2\010\005\020\ufff2\033\ufff2\034" +
    "\012\042\ufff2\045\ufff2\001\002\000\004\002\001\001\002" +
    "\000\004\101\u0160\001\002\000\004\002\u015d\001\002\000" +
    "\022\006\ufff9\010\ufff9\020\ufff9\024\ufff9\033\ufff9\042\ufff9" +
    "\043\230\045\ufff9\001\002\000\014\002\uffe1\020\uffe1\033" +
    "\uffe1\042\026\045\uffe1\001\002\000\004\002\uffff\001\002" +
    "\000\004\101\013\001\002\000\006\064\015\067\014\001" +
    "\002\000\022\006\ufffc\010\ufffc\020\ufffc\024\ufffc\033\ufffc" +
    "\042\ufffc\043\ufffc\045\ufffc\001\002\000\004\101\016\001" +
    "\002\000\012\065\uffb2\066\uffb2\067\uffb2\070\uffb2\001\002" +
    "\000\006\065\021\066\020\001\002\000\004\101\023\001" +
    "\002\000\004\067\022\001\002\000\022\006\ufffb\010\ufffb" +
    "\020\ufffb\024\ufffb\033\ufffb\042\ufffb\043\ufffb\045\ufffb\001" +
    "\002\000\012\065\uffb1\066\uffb1\067\uffb1\070\uffb1\001\002" +
    "\000\014\002\uffe0\006\uffe0\020\uffe0\033\uffe0\045\uffe0\001" +
    "\002\000\012\002\uffb8\020\uffb8\033\uffb8\045\160\001\002" +
    "\000\004\101\031\001\002\000\004\067\uffde\001\002\000" +
    "\004\067\156\001\002\000\004\055\032\001\002\000\034" +
    "\005\061\016\042\032\043\035\053\037\052\051\035\052" +
    "\055\064\047\074\033\101\034\103\044\104\051\106\037" +
    "\001\002\000\004\101\155\001\002\000\020\015\uffd6\065" +
    "\uffd6\066\uffd6\067\uffd6\071\uffe5\072\uffd6\073\uffd6\001\002" +
    "\000\010\101\154\103\152\104\153\001\002\000\012\015" +
    "\uffd9\065\uffd9\067\uffd9\072\uffd9\001\002\000\022\015\uffe2" +
    "\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073" +
    "\uffe2\001\002\000\004\071\150\001\002\000\012\015\uffcc" +
    "\065\uffcc\067\uffcc\072\uffcc\001\002\000\004\030\146\001" +
    "\002\000\012\005\061\016\042\035\053\037\052\001\002" +
    "\000\022\015\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071" +
    "\uffeb\072\uffeb\073\uffeb\001\002\000\006\067\uffdc\072\140" +
    "\001\002\000\012\015\uffce\065\uffce\067\uffce\072\uffce\001" +
    "\002\000\004\101\016\001\002\000\012\015\uffd7\065\uffd7" +
    "\067\uffd7\072\uffd7\001\002\000\022\015\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\001\002" +
    "\000\004\030\134\001\002\000\006\015\uffc5\067\uffc5\001" +
    "\002\000\016\015\uffd5\065\uffd5\066\uffd5\067\uffd5\072\uffd5" +
    "\073\uffd5\001\002\000\010\101\076\103\074\104\075\001" +
    "\002\000\012\015\uffcf\065\uffcf\067\uffcf\072\uffcf\001\002" +
    "\000\012\015\uffd1\065\uffd1\067\uffd1\072\uffd1\001\002\000" +
    "\016\015\uffd4\065\uffd4\066\uffd4\067\uffd4\072\uffd4\073\uffd4" +
    "\001\002\000\004\072\064\001\002\000\012\015\uffcd\065" +
    "\uffcd\067\uffcd\072\uffcd\001\002\000\012\015\uffd8\065\uffd8" +
    "\067\uffd8\072\uffd8\001\002\000\020\051\035\052\055\064" +
    "\047\101\034\103\044\104\051\106\037\001\002\000\006" +
    "\066\uffca\073\uffca\001\002\000\006\066\067\073\070\001" +
    "\002\000\020\051\035\052\055\064\047\101\034\103\044" +
    "\104\051\106\037\001\002\000\004\030\071\001\002\000" +
    "\034\005\061\016\042\032\043\035\053\037\052\051\035" +
    "\052\055\064\047\074\033\101\034\103\044\104\051\106" +
    "\037\001\002\000\012\015\uffcb\065\uffcb\067\uffcb\072\uffcb" +
    "\001\002\000\006\066\uffc9\073\uffc9\001\002\000\022\015" +
    "\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9" +
    "\073\uffe9\001\002\000\022\015\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\001\002\000\022" +
    "\015\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072" +
    "\uffe3\073\uffe3\001\002\000\004\015\133\001\002\000\010" +
    "\015\uffc7\065\uffc7\067\101\001\002\000\014\007\105\015" +
    "\uffc3\065\uffc3\067\uffc3\101\016\001\002\000\006\015\uffc6" +
    "\065\uffc6\001\002\000\010\015\uffc4\065\uffc4\067\uffc4\001" +
    "\002\000\006\066\020\070\131\001\002\000\004\101\106" +
    "\001\002\000\006\030\110\070\107\001\002\000\004\101" +
    "\126\001\002\000\024\015\uffbd\051\035\052\055\065\uffbd" +
    "\067\uffbd\101\111\103\044\104\051\106\037\001\002\000" +
    "\020\015\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5" +
    "\073\uffe5\001\002\000\010\015\uffc0\065\uffc0\067\124\001" +
    "\002\000\006\066\uffed\070\uffed\001\002\000\006\066\116" +
    "\070\117\001\002\000\010\015\uffbf\065\uffbf\067\uffbf\001" +
    "\002\000\016\051\035\052\055\101\111\103\044\104\051" +
    "\106\037\001\002\000\004\064\120\001\002\000\006\065" +
    "\uffc5\067\uffc5\001\002\000\004\065\122\001\002\000\010" +
    "\015\uffbc\065\uffbc\067\uffbc\001\002\000\006\066\uffec\070" +
    "\uffec\001\002\000\024\015\uffbd\051\035\052\055\065\uffbd" +
    "\067\uffbd\101\111\103\044\104\051\106\037\001\002\000" +
    "\010\015\uffbe\065\uffbe\067\uffbe\001\002\000\004\030\127" +
    "\001\002\000\024\015\uffbd\051\035\052\055\065\uffbd\067" +
    "\uffbd\101\111\103\044\104\051\106\037\001\002\000\010" +
    "\015\uffc1\065\uffc1\067\124\001\002\000\034\005\061\016" +
    "\042\032\043\035\053\037\052\051\035\052\055\064\047" +
    "\074\033\101\034\103\044\104\051\106\037\001\002\000" +
    "\010\015\uffc2\065\uffc2\067\uffc2\001\002\000\012\015\uffc8" +
    "\065\uffc8\067\uffc8\072\uffc8\001\002\000\020\051\035\052" +
    "\055\064\047\101\034\103\044\104\051\106\037\001\002" +
    "\000\012\015\uffbb\065\uffbb\067\uffbb\072\uffbb\001\002\000" +
    "\006\065\137\066\020\001\002\000\016\015\uffd3\065\uffd3" +
    "\066\uffd3\067\uffd3\072\uffd3\073\uffd3\001\002\000\016\051" +
    "\035\052\055\101\142\103\044\104\051\106\037\001\002" +
    "\000\004\073\144\001\002\000\006\071\uffe5\073\143\001" +
    "\002\000\004\067\uffdb\001\002\000\004\067\uffda\001\002" +
    "\000\012\015\uffd0\065\uffd0\067\uffd0\072\uffd0\001\002\000" +
    "\034\005\061\016\042\032\043\035\053\037\052\051\035" +
    "\052\055\064\047\074\033\101\034\103\044\104\051\106" +
    "\037\001\002\000\012\015\uffba\065\uffba\067\uffba\072\uffba" +
    "\001\002\000\016\051\035\052\055\101\111\103\044\104" +
    "\051\106\037\001\002\000\016\015\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\072\uffd2\073\uffd2\001\002\000\022\015\uffea\065" +
    "\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea" +
    "\001\002\000\022\015\uffe7\065\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\071\uffe7\072\uffe7\073\uffe7\001\002\000\022\015\uffe4" +
    "\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073" +
    "\uffe4\001\002\000\012\015\uffb9\065\uffb9\067\uffb9\072\uffb9" +
    "\001\002\000\016\002\uffdf\006\uffdf\020\uffdf\033\uffdf\045" +
    "\uffdf\101\031\001\002\000\004\067\uffdd\001\002\000\014" +
    "\002\uffb5\006\uffb5\020\uffb5\033\uffb5\101\uffb5\001\002\000" +
    "\010\002\uffb0\020\uffb0\033\uffb0\001\002\000\012\002\uffb7" +
    "\006\uffb7\020\uffb7\033\uffb7\001\002\000\010\002\ufffe\020" +
    "\171\033\165\001\002\000\022\006\ufff9\010\ufff9\020\ufff9" +
    "\024\ufff9\033\ufff9\042\ufff9\043\230\045\ufff9\001\002\000" +
    "\004\101\u014e\001\002\000\022\006\ufff9\010\ufff9\020\ufff9" +
    "\024\ufff9\033\ufff9\042\ufff9\043\230\045\ufff9\001\002\000" +
    "\004\067\225\001\002\000\004\067\224\001\002\000\004" +
    "\101\172\001\002\000\006\064\173\070\174\001\002\000" +
    "\012\020\204\033\200\045\177\101\016\001\002\000\004" +
    "\101\175\001\002\000\004\067\176\001\002\000\022\006" +
    "\uffa9\010\uffa9\020\uffa9\024\uffa9\033\uffa9\042\uffa9\043\uffa9" +
    "\045\uffa9\001\002\000\004\101\016\001\002\000\004\101" +
    "\016\001\002\000\006\065\213\067\212\001\002\000\006" +
    "\066\020\070\210\001\002\000\006\065\uffa7\067\uffa7\001" +
    "\002\000\004\101\016\001\002\000\006\066\020\070\206" +
    "\001\002\000\034\005\061\016\042\032\043\035\053\037" +
    "\052\051\035\052\055\064\047\074\033\101\034\103\044" +
    "\104\051\106\037\001\002\000\006\065\uffa3\067\uffa3\001" +
    "\002\000\034\005\061\016\042\032\043\035\053\037\052" +
    "\051\035\052\055\064\047\074\033\101\034\103\044\104" +
    "\051\106\037\001\002\000\006\065\uffa4\067\uffa4\001\002" +
    "\000\012\020\204\033\200\045\177\101\016\001\002\000" +
    "\004\070\214\001\002\000\004\101\215\001\002\000\004" +
    "\067\216\001\002\000\022\006\uffa8\010\uffa8\020\uffa8\024" +
    "\uffa8\033\uffa8\042\uffa8\043\uffa8\045\uffa8\001\002\000\006" +
    "\065\uffa6\067\uffa6\001\002\000\010\065\uffa2\066\020\067" +
    "\uffa2\001\002\000\006\066\020\070\222\001\002\000\034" +
    "\005\061\016\042\032\043\035\053\037\052\051\035\052" +
    "\055\064\047\074\033\101\034\103\044\104\051\106\037" +
    "\001\002\000\006\065\uffa5\067\uffa5\001\002\000\012\002" +
    "\uffae\006\uffae\020\uffae\033\uffae\001\002\000\012\002\uffaf" +
    "\006\uffaf\020\uffaf\033\uffaf\001\002\000\004\067\uffac\001" +
    "\002\000\020\006\ufff7\010\ufff7\020\ufff7\024\234\033\ufff7" +
    "\042\ufff7\045\ufff7\001\002\000\004\101\016\001\002\000" +
    "\006\066\020\067\232\001\002\000\020\006\ufff8\010\ufff8" +
    "\020\ufff8\024\ufff8\033\ufff8\042\ufff8\045\ufff8\001\002\000" +
    "\016\006\ufff2\010\005\020\ufff2\033\ufff2\042\ufff2\045\ufff2" +
    "\001\002\000\004\103\235\001\002\000\006\066\ufff3\067" +
    "\ufff3\001\002\000\006\066\ufff5\067\ufff5\001\002\000\006" +
    "\066\240\067\241\001\002\000\004\103\235\001\002\000" +
    "\016\006\ufff6\010\ufff6\020\ufff6\033\ufff6\042\ufff6\045\ufff6" +
    "\001\002\000\006\066\ufff4\067\ufff4\001\002\000\014\006" +
    "\uffe1\020\uffe1\033\uffe1\042\026\045\uffe1\001\002\000\012" +
    "\006\uffb8\020\uffb8\033\uffb8\045\160\001\002\000\010\006" +
    "\uffb0\020\uffb0\033\uffb0\001\002\000\010\006\247\020\171" +
    "\033\165\001\002\000\042\006\247\007\265\015\uff91\017" +
    "\274\021\255\022\261\036\275\046\254\047\262\067\uff91" +
    "\075\300\076\251\077\263\100\256\101\252\103\260\001" +
    "\002\000\006\063\ufffa\067\ufffa\001\002\000\014\014\uff96" +
    "\015\uff96\044\uff96\064\u014b\067\uff96\001\002\000\024\014" +
    "\uff93\015\uff93\044\uff93\050\uff8c\063\uff8c\064\370\067\uff93" +
    "\072\uff8c\074\uff8c\001\002\000\010\015\uff5a\044\uff5a\067" +
    "\uff5a\001\002\000\032\026\324\027\317\051\314\052\330" +
    "\064\325\072\315\101\313\102\334\103\321\104\327\105" +
    "\326\106\316\001\002\000\004\103\u0147\001\002\000\014" +
    "\014\uff95\015\uff95\044\uff95\064\u0144\067\uff95\001\002\000" +
    "\012\014\uff9c\015\uff9c\044\uff9c\067\uff9c\001\002\000\004" +
    "\070\u0142\001\002\000\032\026\324\027\317\051\314\052" +
    "\330\064\325\072\315\101\313\102\334\103\321\104\327" +
    "\105\326\106\316\001\002\000\004\101\303\001\002\000" +
    "\014\014\uff94\015\uff94\044\uff94\064\u012c\067\uff94\001\002" +
    "\000\012\014\uff8e\015\uff8e\044\uff8e\067\uff8e\001\002\000" +
    "\032\026\324\027\317\051\314\052\330\064\325\072\315" +
    "\101\313\102\334\103\321\104\327\105\326\106\316\001" +
    "\002\000\012\014\uff9e\015\uff9e\044\uff9e\067\uff9e\001\002" +
    "\000\012\050\u0120\063\307\072\306\074\305\001\002\000" +
    "\012\014\uff90\015\uff90\044\uff90\067\uff90\001\002\000\012" +
    "\014\uff8d\015\uff8d\044\uff8d\067\uff8d\001\002\000\012\014" +
    "\uffa1\015\uffa1\044\uffa1\067\uffa1\001\002\000\012\014\uff9f" +
    "\015\uff9f\044\uff9f\067\uff9f\001\002\000\004\101\u0115\001" +
    "\002\000\042\006\247\007\265\017\274\021\255\022\261" +
    "\036\275\044\uff91\046\254\047\262\067\uff91\075\300\076" +
    "\251\077\263\100\256\101\252\103\260\001\002\000\012" +
    "\014\uff8f\015\uff8f\044\uff8f\067\uff8f\001\002\000\006\015" +
    "\u0110\067\u010f\001\002\000\014\014\uff97\015\uff97\044\uff97" +
    "\064\301\067\uff97\001\002\000\004\101\303\001\002\000" +
    "\012\063\307\065\304\072\306\074\305\001\002\000\016" +
    "\012\uff8c\063\uff8c\065\uff8c\066\uff8c\072\uff8c\074\uff8c\001" +
    "\002\000\012\014\uff99\015\uff99\044\uff99\067\uff99\001\002" +
    "\000\104\004\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015" +
    "\uff89\023\uff89\025\uff89\030\uff89\031\uff89\040\uff89\041\uff89" +
    "\044\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055" +
    "\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89" +
    "\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89\073" +
    "\uff89\074\uff89\001\002\000\032\026\324\027\317\051\314" +
    "\052\330\064\325\072\315\101\313\102\334\103\321\104" +
    "\327\105\326\106\316\001\002\000\004\101\310\001\002" +
    "\000\104\004\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015" +
    "\uff8a\023\uff8a\025\uff8a\030\uff8a\031\uff8a\040\uff8a\041\uff8a" +
    "\044\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073" +
    "\uff8a\074\uff8a\001\002\000\074\004\uff73\011\uff73\012\uff73" +
    "\013\uff73\014\uff73\015\uff73\023\uff73\025\uff73\030\uff73\031" +
    "\uff73\040\uff73\041\uff73\044\uff73\051\uff73\052\uff73\053\uff73" +
    "\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062" +
    "\uff73\065\uff73\066\uff73\067\uff73\070\uff73\071\uff73\073\uff73" +
    "\001\002\000\062\012\uff81\013\uff81\014\uff81\015\uff81\023" +
    "\374\030\uff81\031\u0104\040\uff81\041\uff81\044\uff81\051\376" +
    "\052\373\055\377\056\u0102\057\u0103\060\u0101\061\u0100\062" +
    "\375\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\073\uff81" +
    "\001\002\000\104\004\uff8c\011\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\023\uff8c\025\uff8c\030\uff8c\031\uff8c\040\uff8c" +
    "\041\uff8c\044\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c" +
    "\064\370\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072" +
    "\uff8c\073\uff8c\074\uff8c\001\002\000\026\026\324\027\317" +
    "\064\325\072\315\101\313\102\334\103\321\104\327\105" +
    "\326\106\316\001\002\000\034\026\324\027\317\051\314" +
    "\052\330\064\325\072\315\073\357\101\313\102\334\103" +
    "\321\104\327\105\326\106\316\001\002\000\074\004\uff68" +
    "\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68\023\uff68\025" +
    "\uff68\030\uff68\031\uff68\040\uff68\041\uff68\044\uff68\051\uff68" +
    "\052\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057\uff68\060" +
    "\uff68\061\uff68\062\uff68\065\uff68\066\uff68\067\uff68\070\uff68" +
    "\071\uff68\073\uff68\001\002\000\026\026\324\027\317\064" +
    "\325\072\315\101\313\102\334\103\321\104\327\105\326" +
    "\106\316\001\002\000\074\004\uff65\011\uff65\012\uff65\013" +
    "\uff65\014\uff65\015\uff65\023\uff65\025\uff65\030\uff65\031\uff65" +
    "\040\uff65\041\uff65\044\uff65\051\uff65\052\uff65\053\uff65\054" +
    "\uff65\055\uff65\056\uff65\057\uff65\060\uff65\061\uff65\062\uff65" +
    "\065\uff65\066\uff65\067\uff65\070\uff65\071\uff65\073\uff65\001" +
    "\002\000\074\004\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b" +
    "\015\uff6b\023\uff6b\025\uff6b\030\uff6b\031\uff6b\040\uff6b\041" +
    "\uff6b\044\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b" +
    "\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\065\uff6b\066" +
    "\uff6b\067\uff6b\070\uff6b\071\uff6b\073\uff6b\001\002\000\010" +
    "\065\uff83\066\uff83\073\uff83\001\002\000\006\066\352\073" +
    "\353\001\002\000\074\004\uff67\011\uff67\012\uff67\013\uff67" +
    "\014\uff67\015\uff67\023\uff67\025\uff67\030\uff67\031\uff67\040" +
    "\uff67\041\uff67\044\uff67\051\uff67\052\uff67\053\uff67\054\uff67" +
    "\055\uff67\056\uff67\057\uff67\060\uff67\061\uff67\062\uff67\065" +
    "\uff67\066\uff67\067\uff67\070\uff67\071\uff67\073\uff67\001\002" +
    "\000\032\026\324\027\317\051\314\052\330\064\325\072" +
    "\315\101\313\102\334\103\321\104\327\105\326\106\316" +
    "\001\002\000\074\004\uff69\011\uff69\012\uff69\013\uff69\014" +
    "\uff69\015\uff69\023\uff69\025\uff69\030\uff69\031\uff69\040\uff69" +
    "\041\uff69\044\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055" +
    "\uff69\056\uff69\057\uff69\060\uff69\061\uff69\062\uff69\065\uff69" +
    "\066\uff69\067\uff69\070\uff69\071\uff69\073\uff69\001\002\000" +
    "\074\004\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a" +
    "\023\uff6a\025\uff6a\030\uff6a\031\uff6a\040\uff6a\041\uff6a\044" +
    "\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a" +
    "\057\uff6a\060\uff6a\061\uff6a\062\uff6a\065\uff6a\066\uff6a\067" +
    "\uff6a\070\uff6a\071\uff6a\073\uff6a\001\002\000\026\026\324" +
    "\027\317\064\325\072\315\101\313\102\334\103\321\104" +
    "\327\105\326\106\316\001\002\000\102\004\uff6d\011\uff6d" +
    "\012\uff6d\013\uff6d\014\uff6d\015\uff6d\023\uff6d\025\uff6d\030" +
    "\uff6d\031\uff6d\040\uff6d\041\uff6d\044\uff6d\051\uff6d\052\uff6d" +
    "\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061" +
    "\uff6d\062\uff6d\063\307\065\uff6d\066\uff6d\067\uff6d\070\uff6d" +
    "\071\uff6d\072\306\073\uff6d\074\305\001\002\000\074\004" +
    "\uff64\011\uff64\012\uff64\013\uff64\014\uff64\015\uff64\023\uff64" +
    "\025\uff64\030\uff64\031\uff64\040\uff64\041\uff64\044\uff64\051" +
    "\uff64\052\uff64\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64" +
    "\060\uff64\061\uff64\062\uff64\065\uff64\066\uff64\067\uff64\070" +
    "\uff64\071\uff64\073\uff64\001\002\000\074\004\336\011\340" +
    "\012\uff79\013\uff79\014\uff79\015\uff79\023\uff79\025\335\030" +
    "\uff79\031\uff79\040\uff79\041\uff79\044\uff79\051\uff79\052\uff79" +
    "\053\341\054\337\055\uff79\056\uff79\057\uff79\060\uff79\061" +
    "\uff79\062\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071\uff79" +
    "\073\uff79\001\002\000\074\004\uff6c\011\uff6c\012\uff6c\013" +
    "\uff6c\014\uff6c\015\uff6c\023\uff6c\025\uff6c\030\uff6c\031\uff6c" +
    "\040\uff6c\041\uff6c\044\uff6c\051\uff6c\052\uff6c\053\uff6c\054" +
    "\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c" +
    "\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\073\uff6c\001" +
    "\002\000\026\026\324\027\317\064\325\072\315\101\313" +
    "\102\334\103\321\104\327\105\326\106\316\001\002\000" +
    "\026\026\324\027\317\064\325\072\315\101\313\102\334" +
    "\103\321\104\327\105\326\106\316\001\002\000\026\026" +
    "\324\027\317\064\325\072\315\101\313\102\334\103\321" +
    "\104\327\105\326\106\316\001\002\000\026\026\324\027" +
    "\317\064\325\072\315\101\313\102\334\103\321\104\327" +
    "\105\326\106\316\001\002\000\026\026\324\027\317\064" +
    "\325\072\315\101\313\102\334\103\321\104\327\105\326" +
    "\106\316\001\002\000\074\004\uff72\011\uff72\012\uff72\013" +
    "\uff72\014\uff72\015\uff72\023\uff72\025\uff72\030\uff72\031\uff72" +
    "\040\uff72\041\uff72\044\uff72\051\uff72\052\uff72\053\uff72\054" +
    "\uff72\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72" +
    "\065\uff72\066\uff72\067\uff72\070\uff72\071\uff72\073\uff72\001" +
    "\002\000\074\004\uff70\011\uff70\012\uff70\013\uff70\014\uff70" +
    "\015\uff70\023\uff70\025\uff70\030\uff70\031\uff70\040\uff70\041" +
    "\uff70\044\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055\uff70" +
    "\056\uff70\057\uff70\060\uff70\061\uff70\062\uff70\065\uff70\066" +
    "\uff70\067\uff70\070\uff70\071\uff70\073\uff70\001\002\000\074" +
    "\004\uff71\011\uff71\012\uff71\013\uff71\014\uff71\015\uff71\023" +
    "\uff71\025\uff71\030\uff71\031\uff71\040\uff71\041\uff71\044\uff71" +
    "\051\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057" +
    "\uff71\060\uff71\061\uff71\062\uff71\065\uff71\066\uff71\067\uff71" +
    "\070\uff71\071\uff71\073\uff71\001\002\000\074\004\uff6e\011" +
    "\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\023\uff6e\025\uff6e" +
    "\030\uff6e\031\uff6e\040\uff6e\041\uff6e\044\uff6e\051\uff6e\052" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e" +
    "\061\uff6e\062\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e\071" +
    "\uff6e\073\uff6e\001\002\000\074\004\uff6f\011\uff6f\012\uff6f" +
    "\013\uff6f\014\uff6f\015\uff6f\023\uff6f\025\uff6f\030\uff6f\031" +
    "\uff6f\040\uff6f\041\uff6f\044\uff6f\051\uff6f\052\uff6f\053\uff6f" +
    "\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061\uff6f\062" +
    "\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\073\uff6f" +
    "\001\002\000\074\004\336\011\340\012\uff77\013\uff77\014" +
    "\uff77\015\uff77\023\uff77\025\335\030\uff77\031\uff77\040\uff77" +
    "\041\uff77\044\uff77\051\uff77\052\uff77\053\341\054\337\055" +
    "\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77\065\uff77" +
    "\066\uff77\067\uff77\070\uff77\071\uff77\073\uff77\001\002\000" +
    "\004\065\351\001\002\000\074\004\uff66\011\uff66\012\uff66" +
    "\013\uff66\014\uff66\015\uff66\023\uff66\025\uff66\030\uff66\031" +
    "\uff66\040\uff66\041\uff66\044\uff66\051\uff66\052\uff66\053\uff66" +
    "\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062" +
    "\uff66\065\uff66\066\uff66\067\uff66\070\uff66\071\uff66\073\uff66" +
    "\001\002\000\032\026\324\027\317\051\314\052\330\064" +
    "\325\072\315\101\313\102\334\103\321\104\327\105\326" +
    "\106\316\001\002\000\104\004\uff8b\011\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\023\uff8b\025\uff8b\030\uff8b\031\uff8b" +
    "\040\uff8b\041\uff8b\044\uff8b\050\uff8b\051\uff8b\052\uff8b\053" +
    "\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071" +
    "\uff8b\072\uff8b\073\uff8b\074\uff8b\001\002\000\010\065\uff82" +
    "\066\uff82\073\uff82\001\002\000\074\004\uff63\011\uff63\012" +
    "\uff63\013\uff63\014\uff63\015\uff63\023\uff63\025\uff63\030\uff63" +
    "\031\uff63\040\uff63\041\uff63\044\uff63\051\uff63\052\uff63\053" +
    "\uff63\054\uff63\055\uff63\056\uff63\057\uff63\060\uff63\061\uff63" +
    "\062\uff63\065\uff63\066\uff63\067\uff63\070\uff63\071\uff63\073" +
    "\uff63\001\002\000\010\066\uff5d\071\365\073\uff5d\001\002" +
    "\000\074\004\uff60\011\uff60\012\uff60\013\uff60\014\uff60\015" +
    "\uff60\023\uff60\025\uff60\030\uff60\031\uff60\040\uff60\041\uff60" +
    "\044\uff60\051\uff60\052\uff60\053\uff60\054\uff60\055\uff60\056" +
    "\uff60\057\uff60\060\uff60\061\uff60\062\uff60\065\uff60\066\uff60" +
    "\067\uff60\070\uff60\071\uff60\073\uff60\001\002\000\006\066" +
    "\uff5f\073\uff5f\001\002\000\006\066\362\073\363\001\002" +
    "\000\032\026\324\027\317\051\314\052\330\064\325\072" +
    "\315\101\313\102\334\103\321\104\327\105\326\106\316" +
    "\001\002\000\074\004\uff61\011\uff61\012\uff61\013\uff61\014" +
    "\uff61\015\uff61\023\uff61\025\uff61\030\uff61\031\uff61\040\uff61" +
    "\041\uff61\044\uff61\051\uff61\052\uff61\053\uff61\054\uff61\055" +
    "\uff61\056\uff61\057\uff61\060\uff61\061\uff61\062\uff61\065\uff61" +
    "\066\uff61\067\uff61\070\uff61\071\uff61\073\uff61\001\002\000" +
    "\006\066\uff5e\073\uff5e\001\002\000\032\026\324\027\317" +
    "\051\314\052\330\064\325\072\315\101\313\102\334\103" +
    "\321\104\327\105\326\106\316\001\002\000\006\066\uff5c" +
    "\073\uff5c\001\002\000\074\004\336\011\340\012\uff78\013" +
    "\uff78\014\uff78\015\uff78\023\uff78\025\335\030\uff78\031\uff78" +
    "\040\uff78\041\uff78\044\uff78\051\uff78\052\uff78\053\341\054" +
    "\337\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062\uff78" +
    "\065\uff78\066\uff78\067\uff78\070\uff78\071\uff78\073\uff78\001" +
    "\002\000\032\026\324\027\317\051\314\052\330\064\325" +
    "\072\315\101\313\102\334\103\321\104\327\105\326\106" +
    "\316\001\002\000\006\065\372\066\352\001\002\000\074" +
    "\004\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62\023" +
    "\uff62\025\uff62\030\uff62\031\uff62\040\uff62\041\uff62\044\uff62" +
    "\051\uff62\052\uff62\053\uff62\054\uff62\055\uff62\056\uff62\057" +
    "\uff62\060\uff62\061\uff62\062\uff62\065\uff62\066\uff62\067\uff62" +
    "\070\uff62\071\uff62\073\uff62\001\002\000\026\026\324\027" +
    "\317\064\325\072\315\101\313\102\334\103\321\104\327" +
    "\105\326\106\316\001\002\000\032\026\324\027\317\051" +
    "\314\052\330\064\325\072\315\101\313\102\334\103\321" +
    "\104\327\105\326\106\316\001\002\000\032\026\324\027" +
    "\317\051\314\052\330\064\325\072\315\101\313\102\334" +
    "\103\321\104\327\105\326\106\316\001\002\000\026\026" +
    "\324\027\317\064\325\072\315\101\313\102\334\103\321" +
    "\104\327\105\326\106\316\001\002\000\032\026\324\027" +
    "\317\051\314\052\330\064\325\072\315\101\313\102\334" +
    "\103\321\104\327\105\326\106\316\001\002\000\032\026" +
    "\324\027\317\051\314\052\330\064\325\072\315\101\313" +
    "\102\334\103\321\104\327\105\326\106\316\001\002\000" +
    "\032\026\324\027\317\051\314\052\330\064\325\072\315" +
    "\101\313\102\334\103\321\104\327\105\326\106\316\001" +
    "\002\000\032\026\324\027\317\051\314\052\330\064\325" +
    "\072\315\101\313\102\334\103\321\104\327\105\326\106" +
    "\316\001\002\000\032\026\324\027\317\051\314\052\330" +
    "\064\325\072\315\101\313\102\334\103\321\104\327\105" +
    "\326\106\316\001\002\000\026\026\324\027\317\064\325" +
    "\072\315\101\313\102\334\103\321\104\327\105\326\106" +
    "\316\001\002\000\074\004\336\011\340\012\uff74\013\uff74" +
    "\014\uff74\015\uff74\023\uff74\025\335\030\uff74\031\uff74\040" +
    "\uff74\041\uff74\044\uff74\051\uff74\052\uff74\053\341\054\337" +
    "\055\uff74\056\uff74\057\uff74\060\uff74\061\uff74\062\uff74\065" +
    "\uff74\066\uff74\067\uff74\070\uff74\071\uff74\073\uff74\001\002" +
    "\000\044\012\uff7e\013\uff7e\014\uff7e\015\uff7e\030\uff7e\031" +
    "\u0104\040\uff7e\041\uff7e\044\uff7e\051\376\052\373\065\uff7e" +
    "\066\uff7e\067\uff7e\070\uff7e\071\uff7e\073\uff7e\001\002\000" +
    "\044\012\uff7f\013\uff7f\014\uff7f\015\uff7f\030\uff7f\031\u0104" +
    "\040\uff7f\041\uff7f\044\uff7f\051\376\052\373\065\uff7f\066" +
    "\uff7f\067\uff7f\070\uff7f\071\uff7f\073\uff7f\001\002\000\044" +
    "\012\uff7c\013\uff7c\014\uff7c\015\uff7c\030\uff7c\031\u0104\040" +
    "\uff7c\041\uff7c\044\uff7c\051\376\052\373\065\uff7c\066\uff7c" +
    "\067\uff7c\070\uff7c\071\uff7c\073\uff7c\001\002\000\044\012" +
    "\uff7d\013\uff7d\014\uff7d\015\uff7d\030\uff7d\031\u0104\040\uff7d" +
    "\041\uff7d\044\uff7d\051\376\052\373\065\uff7d\066\uff7d\067" +
    "\uff7d\070\uff7d\071\uff7d\073\uff7d\001\002\000\044\012\uff80" +
    "\013\uff80\014\uff80\015\uff80\030\uff80\031\u0104\040\uff80\041" +
    "\uff80\044\uff80\051\376\052\373\065\uff80\066\uff80\067\uff80" +
    "\070\uff80\071\uff80\073\uff80\001\002\000\074\004\336\011" +
    "\340\012\uff76\013\uff76\014\uff76\015\uff76\023\uff76\025\335" +
    "\030\uff76\031\uff76\040\uff76\041\uff76\044\uff76\051\uff76\052" +
    "\uff76\053\341\054\337\055\uff76\056\uff76\057\uff76\060\uff76" +
    "\061\uff76\062\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071" +
    "\uff76\073\uff76\001\002\000\044\012\uff7b\013\uff7b\014\uff7b" +
    "\015\uff7b\030\uff7b\031\u0104\040\uff7b\041\uff7b\044\uff7b\051" +
    "\376\052\373\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b" +
    "\073\uff7b\001\002\000\044\012\uff7a\013\uff7a\014\uff7a\015" +
    "\uff7a\030\uff7a\031\u0104\040\uff7a\041\uff7a\044\uff7a\051\376" +
    "\052\373\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\073" +
    "\uff7a\001\002\000\074\004\336\011\340\012\uff75\013\uff75" +
    "\014\uff75\015\uff75\023\uff75\025\335\030\uff75\031\uff75\040" +
    "\uff75\041\uff75\044\uff75\051\uff75\052\uff75\053\341\054\337" +
    "\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75\065" +
    "\uff75\066\uff75\067\uff75\070\uff75\071\uff75\073\uff75\001\002" +
    "\000\044\006\247\007\265\015\uff91\017\274\021\255\022" +
    "\261\036\275\044\uff91\046\254\047\262\067\uff91\075\300" +
    "\076\251\077\263\100\256\101\252\103\260\001\002\000" +
    "\014\014\uff5b\015\uff5b\044\uff5b\063\uff5b\067\uff5b\001\002" +
    "\000\010\015\uff59\044\uff59\067\uff59\001\002\000\006\044" +
    "\u0113\067\u010f\001\002\000\032\026\324\027\317\051\314" +
    "\052\330\064\325\072\315\101\313\102\334\103\321\104" +
    "\327\105\326\106\316\001\002\000\012\014\uff50\015\uff50" +
    "\044\uff50\067\uff50\001\002\000\004\050\u0116\001\002\000" +
    "\032\026\324\027\317\051\314\052\330\064\325\072\315" +
    "\101\313\102\334\103\321\104\327\105\326\106\316\001" +
    "\002\000\006\013\u0119\041\u0118\001\002\000\032\026\324" +
    "\027\317\051\314\052\330\064\325\072\315\101\313\102" +
    "\334\103\321\104\327\105\326\106\316\001\002\000\032" +
    "\026\324\027\317\051\314\052\330\064\325\072\315\101" +
    "\313\102\334\103\321\104\327\105\326\106\316\001\002" +
    "\000\004\012\u011b\001\002\000\046\006\247\007\265\014" +
    "\uff91\015\uff91\017\274\021\255\022\261\036\275\044\uff91" +
    "\046\254\047\262\067\uff91\075\300\076\251\077\263\100" +
    "\256\101\252\103\260\001\002\000\012\014\uff4e\015\uff4e" +
    "\044\uff4e\067\uff4e\001\002\000\004\012\u011e\001\002\000" +
    "\046\006\247\007\265\014\uff91\015\uff91\017\274\021\255" +
    "\022\261\036\275\044\uff91\046\254\047\262\067\uff91\075" +
    "\300\076\251\077\263\100\256\101\252\103\260\001\002" +
    "\000\012\014\uff4f\015\uff4f\044\uff4f\067\uff4f\001\002\000" +
    "\032\026\324\027\317\051\314\052\330\064\325\072\315" +
    "\101\313\102\334\103\321\104\327\105\326\106\316\001" +
    "\002\000\012\014\uff9d\015\uff9d\044\uff9d\067\uff9d\001\002" +
    "\000\004\030\u0123\001\002\000\022\015\uff53\051\035\052" +
    "\055\067\uff53\101\111\103\044\104\051\106\037\001\002" +
    "\000\006\015\u012a\067\u0129\001\002\000\006\066\116\070" +
    "\u0127\001\002\000\006\015\uff55\067\uff55\001\002\000\042" +
    "\006\247\007\265\015\uff91\017\274\021\255\022\261\036" +
    "\275\046\254\047\262\067\uff91\075\300\076\251\077\263" +
    "\100\256\101\252\103\260\001\002\000\006\015\uff52\067" +
    "\uff52\001\002\000\022\015\uff53\051\035\052\055\067\uff53" +
    "\101\111\103\044\104\051\106\037\001\002\000\012\014" +
    "\uff56\015\uff56\044\uff56\067\uff56\001\002\000\006\015\uff54" +
    "\067\uff54\001\002\000\032\026\324\027\317\051\314\052" +
    "\330\064\325\072\315\101\313\102\334\103\321\104\327" +
    "\105\326\106\316\001\002\000\010\065\uff86\066\uff86\070" +
    "\u0133\001\002\000\006\065\u0131\066\u0130\001\002\000\006" +
    "\065\uff88\066\uff88\001\002\000\032\026\324\027\317\051" +
    "\314\052\330\064\325\072\315\101\313\102\334\103\321" +
    "\104\327\105\326\106\316\001\002\000\012\014\uff9b\015" +
    "\uff9b\044\uff9b\067\uff9b\001\002\000\006\065\uff87\066\uff87" +
    "\001\002\000\032\026\324\027\317\051\314\052\330\064" +
    "\325\072\315\101\313\102\334\103\321\104\327\105\326" +
    "\106\316\001\002\000\010\065\uff85\066\uff85\070\u0135\001" +
    "\002\000\032\026\324\027\317\051\314\052\330\064\325" +
    "\072\315\101\313\102\334\103\321\104\327\105\326\106" +
    "\316\001\002\000\006\065\uff84\066\uff84\001\002\000\006" +
    "\012\u013a\066\u0139\001\002\000\014\012\uff4c\063\307\066" +
    "\uff4c\072\306\074\305\001\002\000\004\101\303\001\002" +
    "\000\046\006\247\007\265\014\uff91\015\uff91\017\274\021" +
    "\255\022\261\036\275\044\uff91\046\254\047\262\067\uff91" +
    "\075\300\076\251\077\263\100\256\101\252\103\260\001" +
    "\002\000\012\014\uff4d\015\uff4d\044\uff4d\067\uff4d\001\002" +
    "\000\014\012\uff4b\063\307\066\uff4b\072\306\074\305\001" +
    "\002\000\004\040\u013e\001\002\000\046\006\247\007\265" +
    "\014\uff91\015\uff91\017\274\021\255\022\261\036\275\044" +
    "\uff91\046\254\047\262\067\uff91\075\300\076\251\077\263" +
    "\100\256\101\252\103\260\001\002\000\012\014\u0140\015" +
    "\uff58\044\uff58\067\uff58\001\002\000\046\006\247\007\265" +
    "\014\uff91\015\uff91\017\274\021\255\022\261\036\275\044" +
    "\uff91\046\254\047\262\067\uff91\075\300\076\251\077\263" +
    "\100\256\101\252\103\260\001\002\000\012\014\uff57\015" +
    "\uff57\044\uff57\067\uff57\001\002\000\044\006\247\007\265" +
    "\014\uff91\015\uff91\017\274\021\255\022\261\036\275\044" +
    "\uff91\046\254\047\262\067\uff91\075\300\076\251\077\263" +
    "\100\256\101\252\001\002\000\012\014\uffa0\015\uffa0\044" +
    "\uffa0\067\uffa0\001\002\000\032\026\324\027\317\051\314" +
    "\052\330\064\325\072\315\101\313\102\334\103\321\104" +
    "\327\105\326\106\316\001\002\000\006\065\u0146\066\u0130" +
    "\001\002\000\012\014\uff9a\015\uff9a\044\uff9a\067\uff9a\001" +
    "\002\000\012\014\uff92\015\uff92\044\uff92\067\uff92\001\002" +
    "\000\004\012\u0149\001\002\000\046\006\247\007\265\014" +
    "\uff91\015\uff91\017\274\021\255\022\261\036\275\044\uff91" +
    "\046\254\047\262\067\uff91\075\300\076\251\077\263\100" +
    "\256\101\252\103\260\001\002\000\012\014\uff51\015\uff51" +
    "\044\uff51\067\uff51\001\002\000\004\101\303\001\002\000" +
    "\012\063\307\065\u014d\072\306\074\305\001\002\000\012" +
    "\014\uff98\015\uff98\044\uff98\067\uff98\001\002\000\006\064" +
    "\u0150\067\u014f\001\002\000\022\006\uffab\010\uffab\020\uffab" +
    "\024\uffab\033\uffab\042\uffab\043\uffab\045\uffab\001\002\000" +
    "\012\020\204\033\200\045\177\101\016\001\002\000\006" +
    "\065\u0152\067\212\001\002\000\004\067\u0153\001\002\000" +
    "\022\006\uffaa\010\uffaa\020\uffaa\024\uffaa\033\uffaa\042\uffaa" +
    "\043\uffaa\045\uffaa\001\002\000\004\067\uffad\001\002\000" +
    "\014\002\uffb6\006\uffb6\020\uffb6\033\uffb6\101\016\001\002" +
    "\000\014\002\uffb4\006\uffb4\020\uffb4\033\uffb4\101\uffb4\001" +
    "\002\000\006\066\020\070\u0158\001\002\000\034\005\061" +
    "\016\042\032\043\035\053\037\052\051\035\052\055\064" +
    "\047\074\033\101\034\103\044\104\051\106\037\001\002" +
    "\000\004\067\u015a\001\002\000\014\002\uffb3\006\uffb3\020" +
    "\uffb3\033\uffb3\101\uffb3\001\002\000\004\063\u015c\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\000\001\002\000" +
    "\020\002\ufff0\006\ufff0\020\ufff0\033\ufff0\042\ufff0\045\ufff0" +
    "\101\ufff0\001\002\000\020\002\ufff1\006\ufff1\020\ufff1\033" +
    "\ufff1\042\ufff1\045\ufff1\101\u0160\001\002\000\004\055\u0161" +
    "\001\002\000\016\051\035\052\055\101\111\103\044\104" +
    "\051\106\037\001\002\000\004\067\u0163\001\002\000\020" +
    "\002\uffee\006\uffee\020\uffee\033\uffee\042\uffee\045\uffee\101" +
    "\uffee\001\002\000\020\002\uffef\006\uffef\020\uffef\033\uffef" +
    "\042\uffef\045\uffef\101\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\014\002\005\003\003\004\010\005\006\012" +
    "\007\001\001\000\002\001\001\000\006\014\u015e\015\u015d" +
    "\001\001\000\002\001\001\000\006\006\u015a\013\226\001" +
    "\001\000\006\020\024\021\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\046\160\047\161" +
    "\001\001\000\006\022\027\023\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\017\037" +
    "\024\044\025\035\026\053\027\057\030\062\031\056\032" +
    "\055\034\045\043\061\044\040\045\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\031\144\032\055\034\045\043" +
    "\061\044\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\076" +
    "\036\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\037\025\064\026\053\027\057\033\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\037\025\072\026" +
    "\053\027\057\001\001\000\002\001\001\000\032\017\037" +
    "\024\071\025\035\026\053\027\057\030\062\031\056\032" +
    "\055\034\045\043\061\044\040\045\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\037\102\040\101\052\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\113\017" +
    "\112\041\111\042\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\122\001\001\000\002\001\001\000\006" +
    "\035\120\036\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\113\017\112\042\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\113\017\112\041\127\042\114\001\001\000\002\001\001" +
    "\000\032\017\037\024\131\025\035\026\053\027\057\030" +
    "\062\031\056\032\055\034\045\043\061\044\040\045\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\037\025\134\026\053\027\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\037\027" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\017" +
    "\037\024\146\025\035\026\053\027\057\030\062\031\056" +
    "\032\055\034\045\043\061\044\040\045\047\001\001\000" +
    "\002\001\001\000\004\017\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\156\001\001\000\002\001\001" +
    "\000\004\050\u0154\001\001\000\004\053\162\001\001\000" +
    "\002\001\001\000\012\054\166\055\167\056\163\057\165" +
    "\001\001\000\006\006\u0153\013\226\001\001\000\002\001" +
    "\001\000\006\006\225\013\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\052\201\060\200\061\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\220\001" +
    "\001\000\004\052\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\204\001\001\000" +
    "\002\001\001\000\032\017\037\024\206\025\035\026\053" +
    "\027\057\030\062\031\056\032\055\034\045\043\061\044" +
    "\040\045\047\001\001\000\002\001\001\000\032\017\037" +
    "\024\210\025\035\026\053\027\057\030\062\031\056\032" +
    "\055\034\045\043\061\044\040\045\047\001\001\000\002" +
    "\001\001\000\006\052\201\061\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\017\037\024\222\025\035\026\053\027\057\030\062" +
    "\031\056\032\055\034\045\043\061\044\040\045\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\232\001\001\000\004\052" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\242\001\001\000\006\010\236\011\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\243\021\023\001\001\000\006\046\244\047\161" +
    "\001\001\000\004\053\245\001\001\000\014\054\166\055" +
    "\167\056\163\057\165\102\247\001\001\000\030\062\252" +
    "\063\271\064\272\065\265\066\266\076\256\102\267\103" +
    "\276\104\275\107\263\110\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\066\330\072\u0147\073\311\074\332\075\310\076\317" +
    "\077\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\066\330\072\u013c" +
    "\073\311\074\332\075\310\076\317\077\331\001\001\000" +
    "\006\066\u0137\111\u0136\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\066\330\072\u0121\073\311\074\332\075" +
    "\310\076\317\077\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\062\252" +
    "\063\271\064\272\065\265\066\266\076\256\102\267\103" +
    "\u0111\104\275\107\263\110\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\066\330\070\322\072\321\073" +
    "\311\074\332\075\310\076\317\077\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\066\330\074\366\075\310" +
    "\076\317\077\331\001\001\000\024\066\330\072\355\073" +
    "\311\074\332\075\310\076\317\077\331\100\360\101\357" +
    "\001\001\000\002\001\001\000\012\066\330\075\354\076" +
    "\317\077\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\066\330\072\347\073\311\074\332\075\310\076\317" +
    "\077\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\066\330\074\346\075\310\076\317\077\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\066\330\075\345\076\317\077\331" +
    "\001\001\000\012\066\330\075\344\076\317\077\331\001" +
    "\001\000\012\066\330\075\343\076\317\077\331\001\001" +
    "\000\012\066\330\075\342\076\317\077\331\001\001\000" +
    "\012\066\330\075\341\076\317\077\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\066\330\072\353\073\311\074" +
    "\332\075\310\076\317\077\331\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\066\330\072\355\073\311\074\332\075\310\076\317\077" +
    "\331\101\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\066\330\072\365\073\311\074\332\075\310\076" +
    "\317\077\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\066\330\070\370\072\321\073\311\074\332\075" +
    "\310\076\317\077\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\066\330\074\u010d\075\310\076\317\077" +
    "\331\001\001\000\016\066\330\073\u010c\074\332\075\310" +
    "\076\317\077\331\001\001\000\016\066\330\073\u010b\074" +
    "\332\075\310\076\317\077\331\001\001\000\014\066\330" +
    "\074\u010a\075\310\076\317\077\331\001\001\000\016\066" +
    "\330\073\u0109\074\332\075\310\076\317\077\331\001\001" +
    "\000\016\066\330\073\u0108\074\332\075\310\076\317\077" +
    "\331\001\001\000\016\066\330\073\u0107\074\332\075\310" +
    "\076\317\077\331\001\001\000\016\066\330\073\u0106\074" +
    "\332\075\310\076\317\077\331\001\001\000\016\066\330" +
    "\073\u0105\074\332\075\310\076\317\077\331\001\001\000" +
    "\014\066\330\074\u0104\075\310\076\317\077\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\062\u0110\063\271\064\272\065\265\066\266" +
    "\076\256\102\267\104\275\107\263\110\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\066\330\072\u0113\073\311\074\332\075\310\076\317\077" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\066\330\072\u0116\073\311\074\332\075\310\076\317\077" +
    "\331\001\001\000\002\001\001\000\020\066\330\072\u011c" +
    "\073\311\074\332\075\310\076\317\077\331\001\001\000" +
    "\020\066\330\072\u0119\073\311\074\332\075\310\076\317" +
    "\077\331\001\001\000\002\001\001\000\026\062\u011b\063" +
    "\271\064\272\065\265\066\266\076\256\102\267\104\275" +
    "\107\263\110\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\062\u011e\063\271\064\272\065\265\066\266" +
    "\076\256\102\267\104\275\107\263\110\270\001\001\000" +
    "\002\001\001\000\020\066\330\072\u0120\073\311\074\332" +
    "\075\310\076\317\077\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\u0124\017\112\105\u0123\106\u0125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\062\u0127\063\271\064\272\065\265\066\266" +
    "\076\256\102\267\104\275\107\263\110\270\001\001\000" +
    "\002\001\001\000\010\016\u0124\017\112\106\u012a\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\066\330\067" +
    "\u012d\071\u012e\072\u012c\073\311\074\332\075\310\076\317" +
    "\077\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\066\330\071\u0131\072\u012c\073\311" +
    "\074\332\075\310\076\317\077\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\066\330\072\u0133\073\311" +
    "\074\332\075\310\076\317\077\331\001\001\000\002\001" +
    "\001\000\020\066\330\072\u0135\073\311\074\332\075\310" +
    "\076\317\077\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\u013b\001\001\000\026" +
    "\062\u013a\063\271\064\272\065\265\066\266\076\256\102" +
    "\267\104\275\107\263\110\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\062\u013e\063" +
    "\271\064\272\065\265\066\266\076\256\102\267\104\275" +
    "\107\263\110\270\001\001\000\002\001\001\000\026\062" +
    "\u0140\063\271\064\272\065\265\066\266\076\256\102\267" +
    "\104\275\107\263\110\270\001\001\000\002\001\001\000" +
    "\024\063\u0142\064\272\065\265\066\266\076\256\102\267" +
    "\104\275\107\263\110\270\001\001\000\002\001\001\000" +
    "\024\066\330\067\u0144\071\u012e\072\u012c\073\311\074\332" +
    "\075\310\076\317\077\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\062\u0149\063\271\064\272\065\265\066\266\076\256\102" +
    "\267\104\275\107\263\110\270\001\001\000\002\001\001" +
    "\000\004\066\u014b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\052\201" +
    "\060\u0150\061\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\051\u0155" +
    "\052\u0156\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\017\037\024\u0158\025\035\026\053\027\057\030\062" +
    "\031\056\032\055\034\045\043\061\044\040\045\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0163\001\001\000\002\001\001\000\004\017\u0161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // File ::= Program 
            {
                XMLElement RESULT;
		Location progxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location progxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object prog = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("File",0,(XMLElement)prog);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("File",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= File EOF 
            {
                XMLElement RESULT;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location EOF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location EOF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object EOF1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("_START",0,(XMLElement)start_val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // File ::= Module 
            {
                XMLElement RESULT;
		Location modxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location modxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("File",1,(XMLElement)mod);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("File",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Module ::= ConstantDeclarationPart TypeDefinitionPart VariableDeclarationPart ProcedureAndFunctionDeclarationPart 
            {
                XMLElement RESULT;
		Location constant_decl_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location constant_decl_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object constant_decl_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location type_def_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location type_def_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object type_def_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location var_decl_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location var_decl_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object var_decl_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location proc_fun_decl_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location proc_fun_decl_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object proc_fun_decl_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Module",0,(XMLElement)constant_decl_part,(XMLElement)type_def_part,(XMLElement)var_decl_part,(XMLElement)proc_fun_decl_part);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Module",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= ProgramHeading Block DOT 
            {
                XMLElement RESULT;
		Location prog_headxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location prog_headxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object prog_head = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object block = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location DOT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location DOT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object DOT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Program",0,(XMLElement)prog_head,(XMLElement)block);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramHeading ::= PROGRAM IDENT SEMICOLON 
            {
                XMLElement RESULT;
		Location PROGRAM0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location PROGRAM0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object PROGRAM0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProgramHeading",0,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramHeading",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramHeading ::= PROGRAM IDENT LEFT IdentList RIGHT SEMICOLON 
            {
                XMLElement RESULT;
		Location PROGRAM0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location PROGRAM0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object PROGRAM0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location LEFT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location LEFT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object LEFT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ident_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ident_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ident_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location RIGHT4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location RIGHT4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object RIGHT4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProgramHeading",1,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),(XMLElement)ident_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramHeading",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Block ::= Extern LabelDeclarationPart ConstantDeclarationPart TypeDefinitionPart VariableDeclarationPart ProcedureAndFunctionDeclarationPart StatementPart 
            {
                XMLElement RESULT;
		Location extxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location extxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object ext = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location label_decl_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location label_decl_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object label_decl_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location constant_decl_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location constant_decl_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object constant_decl_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location type_def_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location type_def_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object type_def_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location var_decl_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_decl_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object var_decl_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location proc_fun_decl_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location proc_fun_decl_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object proc_fun_decl_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmt_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmt_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Block",0,(XMLElement)ext,(XMLElement)label_decl_part,(XMLElement)constant_decl_part,(XMLElement)type_def_part,(XMLElement)var_decl_part,(XMLElement)proc_fun_decl_part,(XMLElement)stmt_part);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Extern ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("Extern",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Extern",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Extern ::= USES IdentList SEMICOLON 
            {
                XMLElement RESULT;
		Location USES0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location USES0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object USES0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ident_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ident_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ident_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Extern",1,(XMLElement)ident_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Extern",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LabelDeclarationPart ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("LabelDeclarationPart",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelDeclarationPart",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LabelDeclarationPart ::= LABEL LabelList SEMICOLON 
            {
                XMLElement RESULT;
		Location LABEL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LABEL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LABEL0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location label_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location label_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object label_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LabelDeclarationPart",1,(XMLElement)label_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelDeclarationPart",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LabelList ::= LabelDeclaration 
            {
                XMLElement RESULT;
		Location label_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location label_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object label_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LabelList",0,(XMLElement)label_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LabelList ::= LabelList COMMA LabelDeclaration 
            {
                XMLElement RESULT;
		Location label_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location label_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object label_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location label_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location label_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object label_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LabelList",1,(XMLElement)label_list,(XMLElement)label_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LabelDeclaration ::= INTCONST 
            {
                XMLElement RESULT;
		Location int_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location int_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer int_constant = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LabelDeclaration",0,new XMLElement.Terminal(int_constantxleft,"int_constant",int_constant,int_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelDeclaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstantDeclarationPart ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("ConstantDeclarationPart",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantDeclarationPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstantDeclarationPart ::= CONST ConstDeclarationList 
            {
                XMLElement RESULT;
		Location CONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location CONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object CONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location constant_decl_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location constant_decl_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object constant_decl_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstantDeclarationPart",1,(XMLElement)constant_decl_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantDeclarationPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDeclarationList ::= ConstDeclr 
            {
                XMLElement RESULT;
		Location constant_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location constant_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object constant_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstDeclarationList",0,(XMLElement)constant_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclarationList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDeclarationList ::= ConstDeclarationList ConstDeclr 
            {
                XMLElement RESULT;
		Location constant_decl_lsitxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location constant_decl_lsitxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object constant_decl_lsit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location constant_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location constant_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object constant_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstDeclarationList",1,(XMLElement)constant_decl_lsit,(XMLElement)constant_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclarationList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDeclr ::= IDENT EQ Constant SEMICOLON 
            {
                XMLElement RESULT;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstDeclr",0,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),new XMLElement.Terminal(opxleft,"op",op,opxright),(XMLElement)constant);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstantList ::= Constant 
            {
                XMLElement RESULT;
		Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstantList",0,(XMLElement)constant);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstantList ::= ConstantList COMMA Constant 
            {
                XMLElement RESULT;
		Location constant_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location constant_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object constant_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstantList",1,(XMLElement)constant_list,(XMLElement)constant);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= INTCONST 
            {
                XMLElement RESULT;
		Location int_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location int_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer int_constant = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",0,new XMLElement.Terminal(int_constantxleft,"int_constant",int_constant,int_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= PLUS INTCONST 
            {
                XMLElement RESULT;
		Location PLUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PLUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PLUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location plus_int_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plus_int_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer plus_int_constant = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",1,new XMLElement.Terminal(plus_int_constantxleft,"plus_int_constant",plus_int_constant,plus_int_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= MINUS INTCONST 
            {
                XMLElement RESULT;
		Location MINUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MINUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MINUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location minus_int_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location minus_int_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer minus_int_constant = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",2,new XMLElement.Terminal(minus_int_constantxleft,"minus_int_constant",minus_int_constant,minus_int_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Constant ::= REALCONST 
            {
                XMLElement RESULT;
		Location real_contsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location real_contsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Double real_conts = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",3,new XMLElement.Terminal(real_contsxleft,"real_conts",real_conts,real_contsxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Constant ::= PLUS REALCONST 
            {
                XMLElement RESULT;
		Location PLUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PLUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PLUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location plus_real_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plus_real_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Double plus_real_constant = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",4,new XMLElement.Terminal(plus_real_constantxleft,"plus_real_constant",plus_real_constant,plus_real_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Constant ::= MINUS REALCONST 
            {
                XMLElement RESULT;
		Location MINUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MINUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MINUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location minus_real_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location minus_real_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Double minus_real_constant = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",5,new XMLElement.Terminal(minus_real_constantxleft,"minus_real_constant",minus_real_constant,minus_real_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Constant ::= IDENT 
            {
                XMLElement RESULT;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",6,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Constant ::= PLUS IDENT 
            {
                XMLElement RESULT;
		Location PLUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PLUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PLUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location plus_identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plus_identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String plus_identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",7,new XMLElement.Terminal(plus_identifierxleft,"plus_identifier",plus_identifier,plus_identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Constant ::= MINUS IDENT 
            {
                XMLElement RESULT;
		Location MINUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MINUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MINUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location minus_identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location minus_identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String minus_identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",8,new XMLElement.Terminal(minus_identifierxleft,"minus_identifier",minus_identifier,minus_identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Constant ::= STRINGCONST 
            {
                XMLElement RESULT;
		Location string_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location string_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String string_constant = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",9,new XMLElement.Terminal(string_constantxleft,"string_constant",string_constant,string_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TypeDefinitionPart ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("TypeDefinitionPart",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDefinitionPart",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeDefinitionPart ::= TypeDecl 
            {
                XMLElement RESULT;
		Location type_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object type_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDefinitionPart",1,(XMLElement)type_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDefinitionPart",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeDecl ::= TYPE TypeDeclrList SEMICOLON 
            {
                XMLElement RESULT;
		Location TYPE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location TYPE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object TYPE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_decl_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location type_decl_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object type_decl_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDecl",0,(XMLElement)type_decl_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TypeDeclrList ::= TypeDeclr 
            {
                XMLElement RESULT;
		Location type_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object type_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDeclrList",0,(XMLElement)type_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclrList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TypeDeclrList ::= TypeDeclrList SEMICOLON TypeDeclr 
            {
                XMLElement RESULT;
		Location type_decl_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location type_decl_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object type_decl_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location type_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object type_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDeclrList",1,(XMLElement)type_decl_list,(XMLElement)type_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclrList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TypeDeclr ::= IDENT EQ Type 
            {
                XMLElement RESULT;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDeclr",0,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),new XMLElement.Terminal(opxleft,"op",op,opxright),(XMLElement)type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TypeDeclr ::= IDENT EQ Type LEFTSQ IDENT RIGHTSQ 
            {
                XMLElement RESULT;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFTSQ3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFTSQ3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFTSQ3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifier1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifier1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String identifier1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHTSQ5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHTSQ5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHTSQ5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDeclr",1,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),new XMLElement.Terminal(opxleft,"op",op,opxright),(XMLElement)type,new XMLElement.Terminal(identifier1xleft,"identifier1",identifier1,identifier1xright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TypeDeclr ::= IDENT EQ Type LEFTSQ SubrangeType RIGHTSQ 
            {
                XMLElement RESULT;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFTSQ3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFTSQ3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFTSQ3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location subrange_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location subrange_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object subrange_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHTSQ5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHTSQ5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHTSQ5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDeclr",2,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),new XMLElement.Terminal(opxleft,"op",op,opxright),(XMLElement)type,(XMLElement)subrange_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= SimpleType 
            {
                XMLElement RESULT;
		Location simple_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Type",0,(XMLElement)simple_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type ::= StructuredType 
            {
                XMLElement RESULT;
		Location struct_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location struct_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object struct_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Type",1,(XMLElement)struct_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Type ::= PointerType 
            {
                XMLElement RESULT;
		Location ptr_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ptr_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ptr_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Type",2,(XMLElement)ptr_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SimpleType ::= IDENT 
            {
                XMLElement RESULT;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleType",0,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SimpleType ::= ScalarType 
            {
                XMLElement RESULT;
		Location scalar_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scalar_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object scalar_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleType",1,(XMLElement)scalar_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SimpleType ::= SubrangeType 
            {
                XMLElement RESULT;
		Location subrange_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location subrange_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object subrange_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleType",2,(XMLElement)subrange_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ScalarType ::= LEFT IdentList RIGHT 
            {
                XMLElement RESULT;
		Location LEFT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ident_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ident_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ident_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ScalarType",0,(XMLElement)ident_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ScalarType",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SubrangeType ::= Constant DOTDOT Constant 
            {
                XMLElement RESULT;
		Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DOTDOT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DOTDOT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DOTDOT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location constant1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location constant1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object constant1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SubrangeType",0,(XMLElement)constant,(XMLElement)constant1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SubrangeType",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StructuredType ::= UnpackedType 
            {
                XMLElement RESULT;
		Location unpkg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location unpkg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object unpkg_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredType",0,(XMLElement)unpkg_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StructuredType ::= PACKED UnpackedType 
            {
                XMLElement RESULT;
		Location PACKED0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PACKED0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PACKED0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location unpkg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location unpkg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object unpkg_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredType",1,(XMLElement)unpkg_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // UnpackedType ::= ArrayType 
            {
                XMLElement RESULT;
		Location array_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location array_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object array_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnpackedType",0,(XMLElement)array_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnpackedType",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // UnpackedType ::= RecordType 
            {
                XMLElement RESULT;
		Location record_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location record_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object record_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnpackedType",1,(XMLElement)record_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnpackedType",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // UnpackedType ::= SetType 
            {
                XMLElement RESULT;
		Location set_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location set_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object set_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnpackedType",2,(XMLElement)set_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnpackedType",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // UnpackedType ::= FileType 
            {
                XMLElement RESULT;
		Location file_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location file_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object file_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnpackedType",3,(XMLElement)file_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnpackedType",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ArrayType ::= ARRAY LEFTSQ SimpleTypeList RIGHTSQ OF Type 
            {
                XMLElement RESULT;
		Location arrayxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location arrayxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location LEFTSQ1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location LEFTSQ1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object LEFTSQ1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location simple_type_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location simple_type_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object simple_type_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location RIGHTSQ3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location RIGHTSQ3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object RIGHTSQ3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OF4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OF4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OF4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ArrayType",0,new XMLElement.Terminal(arrayxleft,"array",array,arrayxright),(XMLElement)simple_type_list,(XMLElement)type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayType",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SimpleTypeList ::= SimpleType 
            {
                XMLElement RESULT;
		Location simple_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleTypeList",0,(XMLElement)simple_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SimpleTypeList ::= SimpleTypeList COMMA SimpleType 
            {
                XMLElement RESULT;
		Location simple_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_type1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_type1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_type1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleTypeList",1,(XMLElement)simple_type,(XMLElement)simple_type1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RecordType ::= RECORD FieldList END 
            {
                XMLElement RESULT;
		Location RECORD0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location RECORD0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object RECORD0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location field_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location field_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object field_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location end_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location end_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object end_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("RecordType",0,(XMLElement)field_list,new XMLElement.Terminal(end_tokxleft,"end_tok",end_tok,end_tokxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecordType",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FieldList ::= FieldDeclList 
            {
                XMLElement RESULT;
		Location field_decl_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location field_decl_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object field_decl_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FieldList",0,(XMLElement)field_decl_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FieldList ::= FieldDeclList SEMICOLON VariantFields 
            {
                XMLElement RESULT;
		Location field_decl_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location field_decl_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object field_decl_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location variant_fieldsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location variant_fieldsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object variant_fields = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FieldList",1,(XMLElement)field_decl_list,(XMLElement)variant_fields);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FieldDeclList ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("FieldDeclList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FieldDeclList ::= FieldDeclList SEMICOLON FieldDecl 
            {
                XMLElement RESULT;
		Location field_decl_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location field_decl_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object field_decl_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location field_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location field_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object field_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FieldDeclList",1,(XMLElement)field_decl_list,(XMLElement)field_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FieldDecl ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("FieldDecl",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FieldDecl ::= IdentList COLON Type 
            {
                XMLElement RESULT;
		Location ident_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ident_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ident_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FieldDecl",1,(XMLElement)ident_list,(XMLElement)type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VariantFields ::= CASE IDENT COLON IDENT OF VariantList 
            {
                XMLElement RESULT;
		Location case_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location case_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object case_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location COLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location COLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object COLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location identifier1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifier1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String identifier1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OF4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OF4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OF4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location variant_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location variant_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object variant_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariantFields",0,new XMLElement.Terminal(case_tokxleft,"case_tok",case_tok,case_tokxright),new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),new XMLElement.Terminal(identifier1xleft,"identifier1",identifier1,identifier1xright),(XMLElement)variant_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariantFields",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VariantFields ::= CASE IDENT OF VariantList 
            {
                XMLElement RESULT;
		Location case_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location case_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object case_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OF2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OF2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OF2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location variant_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location variant_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object variant_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariantFields",1,new XMLElement.Terminal(case_tokxleft,"case_tok",case_tok,case_tokxright),new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),(XMLElement)variant_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariantFields",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VariantList ::= Variant 
            {
                XMLElement RESULT;
		Location variantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location variantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object variant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariantList",0,(XMLElement)variant);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariantList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VariantList ::= VariantList SEMICOLON Variant 
            {
                XMLElement RESULT;
		Location variant_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location variant_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object variant_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location variantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location variantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object variant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariantList",1,(XMLElement)variant_list,(XMLElement)variant);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariantList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Variant ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("Variant",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variant",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Variant ::= ConstantList COLON LEFT FieldList RIGHT 
            {
                XMLElement RESULT;
		Location constant_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location constant_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object constant_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location field_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location field_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object field_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Variant",1,(XMLElement)constant_list,(XMLElement)field_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variant",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SetType ::= SET OF SimpleType 
            {
                XMLElement RESULT;
		Location SET0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SET0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SET0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OF1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SetType",0,(XMLElement)simple_type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SetType",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FileType ::= FILE OF Type 
            {
                XMLElement RESULT;
		Location FILE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location FILE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object FILE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OF1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FileType",0,(XMLElement)type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FileType",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PointerType ::= PTR IDENT 
            {
                XMLElement RESULT;
		Location PTR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PTR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PTR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("PointerType",0,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PointerType",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VariableDeclarationPart ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("VariableDeclarationPart",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationPart",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VariableDeclarationPart ::= VarDecl 
            {
                XMLElement RESULT;
		Location var_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location var_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object var_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariableDeclarationPart",1,(XMLElement)var_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationPart",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VarDecl ::= VAR VarDeclrList 
            {
                XMLElement RESULT;
		Location VAR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location VAR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object VAR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location vdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object vdl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VarDecl",0,(XMLElement)vdl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VarDeclrList ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("VarDeclrList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclrList",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VarDeclrList ::= VarDeclrList VarDeclr 
            {
                XMLElement RESULT;
		Location var_decl_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location var_decl_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object var_decl_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location var_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location var_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object var_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VarDeclrList",1,(XMLElement)var_decl_list,(XMLElement)var_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclrList",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VarDeclr ::= IdentList COLON Type SEMICOLON 
            {
                XMLElement RESULT;
		Location ident_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ident_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object ident_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VarDeclr",0,(XMLElement)ident_list,(XMLElement)type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IdentList ::= IDENT 
            {
                XMLElement RESULT;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IdentList",0,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IdentList ::= IdentList COMMA IDENT 
            {
                XMLElement RESULT;
		Location ident_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ident_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ident_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IdentList",1,(XMLElement)ident_list,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ProcedureAndFunctionDeclarationPart ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("ProcedureAndFunctionDeclarationPart",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcedureAndFunctionDeclarationPart",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ProcedureAndFunctionDeclarationPart ::= ProcedureAndFunctionDeclarationPart ProcDeclr SEMICOLON 
            {
                XMLElement RESULT;
		Location proc_fun_decl_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location proc_fun_decl_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object proc_fun_decl_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location proc_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location proc_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object proc_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProcedureAndFunctionDeclarationPart",1,(XMLElement)proc_fun_decl_part,(XMLElement)proc_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcedureAndFunctionDeclarationPart",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ProcedureAndFunctionDeclarationPart ::= ProcedureAndFunctionDeclarationPart FuncDeclr SEMICOLON 
            {
                XMLElement RESULT;
		Location proc_fun_decl_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location proc_fun_decl_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object proc_fun_decl_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fun_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fun_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object fun_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProcedureAndFunctionDeclarationPart",2,(XMLElement)proc_fun_decl_part,(XMLElement)fun_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcedureAndFunctionDeclarationPart",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ProcDeclr ::= ProcHeader Block 
            {
                XMLElement RESULT;
		Location proc_headerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location proc_headerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object proc_header = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object block = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProcDeclr",0,(XMLElement)proc_header,(XMLElement)block);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcDeclr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FuncDeclr ::= FuncHeader Block 
            {
                XMLElement RESULT;
		Location fun_headerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fun_headerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object fun_header = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object block = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FuncDeclr",0,(XMLElement)fun_header,(XMLElement)block);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncDeclr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ProcHeader ::= PROCEDURE IDENT SEMICOLON 
            {
                XMLElement RESULT;
		Location PROCEDURE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location PROCEDURE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object PROCEDURE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProcHeader",0,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcHeader",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ProcHeader ::= PROCEDURE IDENT LEFT FormalParamDeclList RIGHT SEMICOLON 
            {
                XMLElement RESULT;
		Location PROCEDURE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location PROCEDURE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object PROCEDURE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location LEFT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location LEFT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object LEFT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location formal_param_decl_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location formal_param_decl_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object formal_param_decl_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location RIGHT4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location RIGHT4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object RIGHT4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProcHeader",1,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),(XMLElement)formal_param_decl_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcHeader",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FuncHeader ::= FUNCTION IDENT COLON IDENT SEMICOLON 
            {
                XMLElement RESULT;
		Location FUNCTION0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location FUNCTION0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object FUNCTION0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location COLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location COLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object COLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifier1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifier1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String identifier1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FuncHeader",0,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),new XMLElement.Terminal(identifier1xleft,"identifier1",identifier1,identifier1xright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncHeader",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FuncHeader ::= FUNCTION IDENT LEFT FormalParamDeclList RIGHT COLON IDENT SEMICOLON 
            {
                XMLElement RESULT;
		Location FUNCTION0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location FUNCTION0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		Object FUNCTION0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location LEFT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location LEFT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object LEFT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location formal_param_decl_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location formal_param_decl_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object formal_param_decl_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location RIGHT4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location RIGHT4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object RIGHT4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location COLON5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location COLON5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object COLON5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifier1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifier1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String identifier1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON7xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON7xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FuncHeader",1,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),(XMLElement)formal_param_decl_list,new XMLElement.Terminal(identifier1xleft,"identifier1",identifier1,identifier1xright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncHeader",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FormalParamDeclList ::= FormalParamDecl 
            {
                XMLElement RESULT;
		Location formal_param_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location formal_param_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object formal_param_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDeclList",0,(XMLElement)formal_param_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDeclList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FormalParamDeclList ::= FormalParamDeclList SEMICOLON FormalParamDecl 
            {
                XMLElement RESULT;
		Location formal_param_decl_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location formal_param_decl_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object formal_param_decl_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location formal_param_declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location formal_param_declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object formal_param_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDeclList",1,(XMLElement)formal_param_decl_list,(XMLElement)formal_param_decl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDeclList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FormalParamDecl ::= VAR IdentList COLON Type 
            {
                XMLElement RESULT;
		Location VAR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location VAR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object VAR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ident_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ident_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ident_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDecl",0,(XMLElement)ident_list,(XMLElement)type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FormalParamDecl ::= IdentList COLON Type 
            {
                XMLElement RESULT;
		Location ident_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ident_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ident_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDecl",1,(XMLElement)ident_list,(XMLElement)type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FormalParamDecl ::= FUNCTION IdentList COLON Type 
            {
                XMLElement RESULT;
		Location FUNCTION0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location FUNCTION0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object FUNCTION0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ident_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ident_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ident_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDecl",2,(XMLElement)ident_list,(XMLElement)type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FormalParamDecl ::= PROCEDURE IdentList 
            {
                XMLElement RESULT;
		Location PROCEDURE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PROCEDURE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PROCEDURE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ident_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ident_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ident_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDecl",3,(XMLElement)ident_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stmt ::= UnlabelledStmt 
            {
                XMLElement RESULT;
		Location unlabel_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location unlabel_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object unlabel_stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",0,(XMLElement)unlabel_stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Stmt ::= INTCONST COLON UnlabelledStmt 
            {
                XMLElement RESULT;
		Location int_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location int_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer int_constant = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location unlabel_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location unlabel_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object unlabel_stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",1,new XMLElement.Terminal(int_constantxleft,"int_constant",int_constant,int_constantxright),(XMLElement)unlabel_stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // UnlabelledStmt ::= SimpleStmt 
            {
                XMLElement RESULT;
		Location simple_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnlabelledStmt",0,(XMLElement)simple_stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnlabelledStmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // UnlabelledStmt ::= StructuredStmt 
            {
                XMLElement RESULT;
		Location struct_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location struct_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object struct_stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnlabelledStmt",1,(XMLElement)struct_stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnlabelledStmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SimpleStmt ::= Variable ASSIGN Expr 
            {
                XMLElement RESULT;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ASSIGN1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ASSIGN1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ASSIGN1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",0,(XMLElement)var,(XMLElement)expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SimpleStmt ::= Invocation 
            {
                XMLElement RESULT;
		Location invocxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location invocxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object invoc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",1,(XMLElement)invoc);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SimpleStmt ::= WRITE LEFT WriteExprList RIGHT 
            {
                XMLElement RESULT;
		Location WRITE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location WRITE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object WRITE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location write_expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location write_expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object write_expr_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",2,(XMLElement)write_expr_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SimpleStmt ::= WRITELN LEFT WriteExprList RIGHT 
            {
                XMLElement RESULT;
		Location WRITELN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location WRITELN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object WRITELN0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location write_expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location write_expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object write_expr_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",3,(XMLElement)write_expr_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SimpleStmt ::= READLN LEFT Variable RIGHT 
            {
                XMLElement RESULT;
		Location READLN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location READLN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object READLN0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",4,(XMLElement)var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SimpleStmt ::= READ LEFT Variable RIGHT 
            {
                XMLElement RESULT;
		Location READ0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location READ0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object READ0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",5,(XMLElement)var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SimpleStmt ::= READLN 
            {
                XMLElement RESULT;
		Location READLN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location READLN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object READLN0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",6);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SimpleStmt ::= READ 
            {
                XMLElement RESULT;
		Location READ0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location READ0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object READ0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",7);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SimpleStmt ::= WRITELN 
            {
                XMLElement RESULT;
		Location WRITELN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location WRITELN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object WRITELN0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",8);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SimpleStmt ::= WRITE 
            {
                XMLElement RESULT;
		Location WRITE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location WRITE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object WRITE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",9);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SimpleStmt ::= IDENT 
            {
                XMLElement RESULT;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",10,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SimpleStmt ::= GOTO INTCONST 
            {
                XMLElement RESULT;
		Location GOTO0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location GOTO0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object GOTO0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location int_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location int_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer int_constant = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",11,new XMLElement.Terminal(int_constantxleft,"int_constant",int_constant,int_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SimpleStmt ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",12);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // StructuredStmt ::= StatementPart 
            {
                XMLElement RESULT;
		Location stmt_partxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmt_partxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt_part = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredStmt",0,(XMLElement)stmt_part);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredStmt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // StructuredStmt ::= ConditionalStmt 
            {
                XMLElement RESULT;
		Location cont_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cont_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object cont_stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredStmt",1,(XMLElement)cont_stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredStmt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // StructuredStmt ::= LoopStmt 
            {
                XMLElement RESULT;
		Location loop_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location loop_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object loop_stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredStmt",2,(XMLElement)loop_stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredStmt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // StructuredStmt ::= WithStmt 
            {
                XMLElement RESULT;
		Location with_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location with_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object with_stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredStmt",3,(XMLElement)with_stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredStmt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Variable ::= IDENT 
            {
                XMLElement RESULT;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Variable",0,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Variable ::= Variable LEFTSQ ExprList RIGHTSQ 
            {
                XMLElement RESULT;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFTSQ1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFTSQ1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFTSQ1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object expr_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHTSQ3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHTSQ3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHTSQ3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Variable",1,(XMLElement)var,(XMLElement)expr_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Variable ::= Variable DOT IDENT 
            {
                XMLElement RESULT;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DOT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DOT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DOT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Variable",2,(XMLElement)var,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Variable ::= Variable PTR 
            {
                XMLElement RESULT;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location PTR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location PTR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object PTR1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Variable",3,(XMLElement)var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // WriteExprList ::= WriteExpr 
            {
                XMLElement RESULT;
		Location write_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location write_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object write_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WriteExprList",0,(XMLElement)write_expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteExprList",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WriteExprList ::= WriteExprList COMMA WriteExpr 
            {
                XMLElement RESULT;
		Location write_expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location write_expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object write_expr_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location write_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location write_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object write_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WriteExprList",1,(XMLElement)write_expr_list,(XMLElement)write_expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteExprList",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // WriteExpr ::= Expr 
            {
                XMLElement RESULT;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WriteExpr",0,(XMLElement)expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteExpr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WriteExpr ::= Expr COLON Expr 
            {
                XMLElement RESULT;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WriteExpr",1,(XMLElement)expr,(XMLElement)expr1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteExpr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // WriteExpr ::= Expr COLON Expr COLON Expr 
            {
                XMLElement RESULT;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WriteExpr",2,(XMLElement)expr,(XMLElement)expr1,(XMLElement)expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteExpr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ExprList ::= Expr 
            {
                XMLElement RESULT;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ExprList",0,(XMLElement)expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ExprList ::= ExprList COMMA Expr 
            {
                XMLElement RESULT;
		Location expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object expr_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ExprList",1,(XMLElement)expr_list,(XMLElement)expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr ::= SimpleExpr 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",0,(XMLElement)simple_expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr ::= SimpleExpr EQ SimpleExpr 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location EQ1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location EQ1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object EQ1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",1,(XMLElement)simple_expr,(XMLElement)simple_expr1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr ::= SimpleExpr NE SimpleExpr 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location NE1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location NE1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object NE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",2,(XMLElement)simple_expr,(XMLElement)simple_expr1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expr ::= SimpleExpr LT SimpleExpr 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location LT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location LT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object LT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",3,(XMLElement)simple_expr,(XMLElement)simple_expr1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr ::= SimpleExpr LE SimpleExpr 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location LE1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location LE1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object LE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",4,(XMLElement)simple_expr,(XMLElement)simple_expr1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr ::= SimpleExpr GT SimpleExpr 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location GT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location GT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object GT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",5,(XMLElement)simple_expr,(XMLElement)simple_expr1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Expr ::= SimpleExpr GE SimpleExpr 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location GE1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location GE1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object GE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",6,(XMLElement)simple_expr,(XMLElement)simple_expr1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expr ::= SimpleExpr IN SimpleExpr 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location IN1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location IN1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object IN1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location simple_expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location simple_expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object simple_expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",7,(XMLElement)simple_expr,(XMLElement)simple_expr1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SimpleExpr ::= Term 
            {
                XMLElement RESULT;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",0,(XMLElement)term);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SimpleExpr ::= PLUS Term 
            {
                XMLElement RESULT;
		Location PLUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PLUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PLUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",1,(XMLElement)term);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SimpleExpr ::= MINUS Term 
            {
                XMLElement RESULT;
		Location MINUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MINUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MINUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",2,(XMLElement)term);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SimpleExpr ::= SimpleExpr PLUS Term 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location PLUS1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PLUS1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PLUS1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",3,(XMLElement)simple_expr,(XMLElement)term);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SimpleExpr ::= SimpleExpr MINUS Term 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location MINUS1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MINUS1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MINUS1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",4,(XMLElement)simple_expr,(XMLElement)term);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SimpleExpr ::= SimpleExpr OR Term 
            {
                XMLElement RESULT;
		Location simple_exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location simple_exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object simple_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OR1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",5,(XMLElement)simple_expr,(XMLElement)term);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Term ::= Factor 
            {
                XMLElement RESULT;
		Location factorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location factorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",0,(XMLElement)factor);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Term ::= Term TIMES Factor 
            {
                XMLElement RESULT;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location TIMES1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location TIMES1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object TIMES1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location factorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location factorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",1,(XMLElement)term,(XMLElement)factor);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Term ::= Term DIVIDE Factor 
            {
                XMLElement RESULT;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DIVIDE1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DIVIDE1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DIVIDE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location factorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location factorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",2,(XMLElement)term,(XMLElement)factor);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Term ::= Term DIV Factor 
            {
                XMLElement RESULT;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DIV1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DIV1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DIV1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location factorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location factorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",3,(XMLElement)term,(XMLElement)factor);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Term ::= Term MOD Factor 
            {
                XMLElement RESULT;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location MOD1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MOD1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MOD1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location factorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location factorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",4,(XMLElement)term,(XMLElement)factor);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Term ::= Term AND Factor 
            {
                XMLElement RESULT;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location and_operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location and_operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object and_operator = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location factorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location factorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",5,(XMLElement)term,new XMLElement.Terminal(and_operatorxleft,"and_operator",and_operator,and_operatorxright),(XMLElement)factor);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Factor ::= Variable 
            {
                XMLElement RESULT;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",0,(XMLElement)var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Factor ::= BOOLCONST 
            {
                XMLElement RESULT;
		Location bool_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean bool_constant = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",1,new XMLElement.Terminal(bool_constantxleft,"bool_constant",bool_constant,bool_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Factor ::= INTCONST 
            {
                XMLElement RESULT;
		Location int_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location int_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer int_constant = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",2,new XMLElement.Terminal(int_constantxleft,"int_constant",int_constant,int_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Factor ::= REALCONST 
            {
                XMLElement RESULT;
		Location real_contxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location real_contxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Double real_cont = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",3,new XMLElement.Terminal(real_contxleft,"real_cont",real_cont,real_contxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Factor ::= CHARCONST 
            {
                XMLElement RESULT;
		Location char_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location char_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character char_constant = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",4,new XMLElement.Terminal(char_constantxleft,"char_constant",char_constant,char_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Factor ::= STRINGCONST 
            {
                XMLElement RESULT;
		Location string_constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location string_constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String string_constant = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",5,new XMLElement.Terminal(string_constantxleft,"string_constant",string_constant,string_constantxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Factor ::= NIL 
            {
                XMLElement RESULT;
		Location nilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",6,new XMLElement.Terminal(nilxleft,"nil",nil,nilxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Factor ::= LEFT Expr RIGHT 
            {
                XMLElement RESULT;
		Location LEFT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",7,(XMLElement)expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Factor ::= Invocation 
            {
                XMLElement RESULT;
		Location invocxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location invocxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object invoc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",8,(XMLElement)invoc);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Factor ::= Set 
            {
                XMLElement RESULT;
		Location setxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location setxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object set = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",9,(XMLElement)set);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Factor ::= NOT Factor 
            {
                XMLElement RESULT;
		Location NOT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location NOT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object NOT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location factorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location factorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",10,(XMLElement)factor);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Invocation ::= IDENT LEFT ExprList RIGHT 
            {
                XMLElement RESULT;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expr_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expr_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object expr_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Invocation",0,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),(XMLElement)expr_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Invocation",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Set ::= LEFTSQ ElementList RIGHTSQ 
            {
                XMLElement RESULT;
		Location LEFTSQ0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFTSQ0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFTSQ0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location elem_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elem_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object elem_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHTSQ2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHTSQ2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHTSQ2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Set",0,(XMLElement)elem_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Set",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Set ::= LEFTSQ RIGHTSQ 
            {
                XMLElement RESULT;
		Location LEFTSQ0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location LEFTSQ0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object LEFTSQ0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHTSQ1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHTSQ1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHTSQ1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Set",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Set",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ElementList ::= Element 
            {
                XMLElement RESULT;
		Location elemxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elemxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object elem = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ElementList",0,(XMLElement)elem);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ElementList ::= ElementList COMMA Element 
            {
                XMLElement RESULT;
		Location elem_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location elem_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object elem_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location elemxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elemxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object elem = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ElementList",1,(XMLElement)elem_list,(XMLElement)elem);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Element ::= Expr 
            {
                XMLElement RESULT;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Element",0,(XMLElement)expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Element ::= Expr DOTDOT Expr 
            {
                XMLElement RESULT;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DOTDOT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DOTDOT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DOTDOT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Element",1,(XMLElement)expr,(XMLElement)expr1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // StatementPart ::= BEGIN StmtList END 
            {
                XMLElement RESULT;
		Location begin_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location begin_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object begin_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmt_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stmt_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object stmt_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location end_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location end_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object end_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StatementPart",0,new XMLElement.Terminal(begin_tokxleft,"begin_tok",begin_tok,begin_tokxright),(XMLElement)stmt_list,new XMLElement.Terminal(end_tokxleft,"end_tok",end_tok,end_tokxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementPart",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // StmtList ::= Stmt 
            {
                XMLElement RESULT;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StmtList",0,(XMLElement)stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // StmtList ::= StmtList SEMICOLON Stmt 
            {
                XMLElement RESULT;
		Location stmt_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stmt_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object stmt_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StmtList",1,(XMLElement)stmt_list,(XMLElement)stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ConditionalStmt ::= IF Expr THEN Stmt 
            {
                XMLElement RESULT;
		Location if_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location if_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object if_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location then_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location then_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object then_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConditionalStmt",0,new XMLElement.Terminal(if_tokxleft,"if_tok",if_tok,if_tokxright),(XMLElement)expr,new XMLElement.Terminal(then_tokxleft,"then_tok",then_tok,then_tokxright),(XMLElement)stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalStmt",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ConditionalStmt ::= IF Expr THEN Stmt ELSE Stmt 
            {
                XMLElement RESULT;
		Location if_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location if_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object if_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location then_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location then_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object then_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location else_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location else_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object else_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmt1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmt1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConditionalStmt",1,new XMLElement.Terminal(if_tokxleft,"if_tok",if_tok,if_tokxright),(XMLElement)expr,new XMLElement.Terminal(then_tokxleft,"then_tok",then_tok,then_tokxright),(XMLElement)stmt,new XMLElement.Terminal(else_tokxleft,"else_tok",else_tok,else_tokxright),(XMLElement)stmt1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalStmt",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ConditionalStmt ::= CASE Expr OF CaseStmtList END 
            {
                XMLElement RESULT;
		Location case_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location case_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object case_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location OF2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location OF2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object OF2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location case_stmt_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location case_stmt_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object case_stmt_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location end_tokxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location end_tokxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object end_tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConditionalStmt",2,new XMLElement.Terminal(case_tokxleft,"case_tok",case_tok,case_tokxright),(XMLElement)expr,(XMLElement)case_stmt_list,new XMLElement.Terminal(end_tokxleft,"end_tok",end_tok,end_tokxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalStmt",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CaseStmtList ::= CaseStmt 
            {
                XMLElement RESULT;
		Location case_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location case_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object case_stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("CaseStmtList",0,(XMLElement)case_stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseStmtList",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CaseStmtList ::= CaseStmtList SEMICOLON CaseStmt 
            {
                XMLElement RESULT;
		Location case_stmt_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location case_stmt_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object case_stmt_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location case_stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location case_stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object case_stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("CaseStmtList",1,(XMLElement)case_stmt_list,(XMLElement)case_stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseStmtList",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CaseStmt ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("CaseStmt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseStmt",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CaseStmt ::= ConstantList COLON Stmt 
            {
                XMLElement RESULT;
		Location constant_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location constant_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object constant_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("CaseStmt",1,(XMLElement)constant_list,(XMLElement)stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseStmt",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // LoopStmt ::= WHILE Expr DO Stmt 
            {
                XMLElement RESULT;
		Location WHILE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location WHILE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object WHILE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DO2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DO2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DO2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LoopStmt",0,(XMLElement)expr,(XMLElement)stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopStmt",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // LoopStmt ::= REPEAT StmtList UNTIL Expr 
            {
                XMLElement RESULT;
		Location REPEAT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location REPEAT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object REPEAT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location stmt_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stmt_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object stmt_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location UNTIL2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location UNTIL2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object UNTIL2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LoopStmt",1,(XMLElement)stmt_list,(XMLElement)expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopStmt",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // LoopStmt ::= FOR IDENT ASSIGN Expr TO Expr DO Stmt 
            {
                XMLElement RESULT;
		Location FOR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location FOR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		Object FOR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location ASSIGN2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ASSIGN2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object ASSIGN2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location TO4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location TO4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object TO4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DO6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DO6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DO6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LoopStmt",2,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),(XMLElement)expr,(XMLElement)expr1,(XMLElement)stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopStmt",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // LoopStmt ::= FOR IDENT ASSIGN Expr DOWNTO Expr DO Stmt 
            {
                XMLElement RESULT;
		Location FOR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location FOR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		Object FOR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location identifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location identifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location ASSIGN2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ASSIGN2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object ASSIGN2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location DOWNTO4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location DOWNTO4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object DOWNTO4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DO6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DO6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DO6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LoopStmt",3,new XMLElement.Terminal(identifierxleft,"identifier",identifier,identifierxright),(XMLElement)expr,(XMLElement)expr1,(XMLElement)stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopStmt",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // WithStmt ::= WITH VariableList DO Stmt 
            {
                XMLElement RESULT;
		Location WITH0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location WITH0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object WITH0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location var_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object var_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DO2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DO2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DO2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WithStmt",0,(XMLElement)var_list,(XMLElement)stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WithStmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // VariableList ::= Variable 
            {
                XMLElement RESULT;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariableList",0,(XMLElement)var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableList",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // VariableList ::= VariableList COMMA Variable 
            {
                XMLElement RESULT;
		Location var_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object var_list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariableList",1,(XMLElement)var_list,(XMLElement)var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableList",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package grammar;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement.*;
import javax.xml.stream.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\254\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\010\000\002\004\010\000\002\005\002" +
    "\000\002\005\003\000\002\006\005\000\002\007\003\000" +
    "\002\007\005\000\002\010\003\000\002\011\002\000\002" +
    "\011\003\000\002\012\005\000\002\013\003\000\002\013" +
    "\005\000\002\014\005\000\002\015\003\000\002\015\005" +
    "\000\002\016\003\000\002\016\004\000\002\016\004\000" +
    "\002\016\003\000\002\016\004\000\002\016\004\000\002" +
    "\016\003\000\002\016\004\000\002\016\004\000\002\016" +
    "\003\000\002\017\002\000\002\017\003\000\002\020\005" +
    "\000\002\021\003\000\002\021\005\000\002\022\005\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\005\000\002\026\005\000\002\027\003\000\002\027\004" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\010\000\002\032\003\000\002" +
    "\032\005\000\002\033\005\000\002\034\003\000\002\034" +
    "\005\000\002\035\002\000\002\035\005\000\002\036\002" +
    "\000\002\036\005\000\002\037\010\000\002\037\006\000" +
    "\002\040\003\000\002\040\005\000\002\041\002\000\002" +
    "\041\007\000\002\042\005\000\002\043\005\000\002\044" +
    "\004\000\002\045\002\000\002\045\003\000\002\046\005" +
    "\000\002\047\002\000\002\047\005\000\002\050\005\000" +
    "\002\051\002\000\002\051\005\000\002\052\002\000\002" +
    "\052\005\000\002\052\005\000\002\053\004\000\002\054" +
    "\004\000\002\055\005\000\002\055\010\000\002\056\007" +
    "\000\002\056\012\000\002\057\003\000\002\057\005\000" +
    "\002\060\006\000\002\060\005\000\002\060\006\000\002" +
    "\060\004\000\002\061\003\000\002\061\005\000\002\062" +
    "\003\000\002\062\003\000\002\063\005\000\002\063\003" +
    "\000\002\063\006\000\002\063\006\000\002\063\003\000" +
    "\002\063\004\000\002\063\002\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\065" +
    "\003\000\002\065\006\000\002\065\005\000\002\065\004" +
    "\000\002\066\003\000\002\066\005\000\002\070\003\000" +
    "\002\070\005\000\002\070\007\000\002\067\003\000\002" +
    "\067\005\000\002\071\003\000\002\071\005\000\002\071" +
    "\005\000\002\071\005\000\002\071\005\000\002\071\005" +
    "\000\002\071\005\000\002\071\005\000\002\072\003\000" +
    "\002\072\004\000\002\072\004\000\002\072\005\000\002" +
    "\072\005\000\002\072\005\000\002\073\003\000\002\073" +
    "\005\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\005\000\002\074" +
    "\003\000\002\074\003\000\002\074\004\000\002\075\006" +
    "\000\002\076\005\000\002\076\004\000\002\077\003\000" +
    "\002\077\005\000\002\100\003\000\002\100\005\000\002" +
    "\101\005\000\002\102\003\000\002\102\005\000\002\103" +
    "\006\000\002\103\010\000\002\103\007\000\002\104\003" +
    "\000\002\104\005\000\002\105\002\000\002\105\005\000" +
    "\002\106\006\000\002\106\006\000\002\106\012\000\002" +
    "\106\012\000\002\107\006\000\002\110\003\000\002\110" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\004\034\006\001\002\000\004\002\u014f\001" +
    "\002\000\020\006\ufffc\010\ufffc\020\ufffc\024\020\033\ufffc" +
    "\042\ufffc\044\ufffc\001\002\000\004\074\007\001\002\000" +
    "\006\063\010\066\011\001\002\000\006\064\uffb7\065\uffb7" +
    "\001\002\000\020\006\uffff\010\uffff\020\uffff\024\uffff\033" +
    "\uffff\042\uffff\044\uffff\001\002\000\006\064\014\065\013" +
    "\001\002\000\004\074\016\001\002\000\004\066\015\001" +
    "\002\000\020\006\ufffe\010\ufffe\020\ufffe\024\ufffe\033\ufffe" +
    "\042\ufffe\044\ufffe\001\002\000\012\064\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\001\002\000\016\006\ufff6\010\033\020\ufff6" +
    "\033\ufff6\042\ufff6\044\ufff6\001\002\000\004\076\025\001" +
    "\002\000\004\062\023\001\002\000\016\006\ufffb\010\ufffb" +
    "\020\ufffb\033\ufffb\042\ufffb\044\ufffb\001\002\000\004\002" +
    "\000\001\002\000\006\065\027\066\030\001\002\000\006" +
    "\065\ufff7\066\ufff7\001\002\000\006\065\ufff9\066\ufff9\001" +
    "\002\000\004\076\025\001\002\000\016\006\ufffa\010\ufffa" +
    "\020\ufffa\033\ufffa\042\ufffa\044\ufffa\001\002\000\006\065" +
    "\ufff8\066\ufff8\001\002\000\014\006\ufff5\020\ufff5\033\ufff5" +
    "\042\ufff5\044\ufff5\001\002\000\004\074\u0149\001\002\000" +
    "\014\006\uffe4\020\uffe4\033\uffe4\042\036\044\uffe4\001\002" +
    "\000\012\006\uffe3\020\uffe3\033\uffe3\044\uffe3\001\002\000" +
    "\004\074\u0142\001\002\000\012\006\uffbd\020\uffbd\033\uffbd" +
    "\044\040\001\002\000\004\066\uffba\001\002\000\010\006" +
    "\uffbc\020\uffbc\033\uffbc\001\002\000\010\006\uffb5\020\uffb5" +
    "\033\uffb5\001\002\000\010\006\050\020\053\033\046\001" +
    "\002\000\006\062\ufffd\066\ufffd\001\002\000\020\006\ufffc" +
    "\010\ufffc\020\ufffc\024\020\033\ufffc\042\ufffc\044\ufffc\001" +
    "\002\000\004\074\u0133\001\002\000\020\006\ufffc\010\ufffc" +
    "\020\ufffc\024\020\033\ufffc\042\ufffc\044\ufffc\001\002\000" +
    "\036\006\050\007\241\015\uff9c\017\247\021\230\022\234" +
    "\036\250\045\227\046\235\066\uff9c\074\225\076\233\104" +
    "\236\105\231\001\002\000\004\066\224\001\002\000\004" +
    "\066\223\001\002\000\004\074\054\001\002\000\006\063" +
    "\055\067\056\001\002\000\014\020\066\033\062\044\061" +
    "\065\uffb7\067\uffb7\001\002\000\004\074\057\001\002\000" +
    "\004\066\060\001\002\000\020\006\uffae\010\uffae\020\uffae" +
    "\024\uffae\033\uffae\042\uffae\044\uffae\001\002\000\006\065" +
    "\uffb7\067\uffb7\001\002\000\010\064\uffb7\065\uffb7\066\uffb7" +
    "\001\002\000\006\064\212\066\211\001\002\000\006\065" +
    "\013\067\207\001\002\000\006\064\uffac\066\uffac\001\002" +
    "\000\006\065\uffb7\067\uffb7\001\002\000\006\065\013\067" +
    "\070\001\002\000\034\005\117\016\100\032\101\035\111" +
    "\037\110\050\073\051\113\063\105\073\071\074\072\076" +
    "\102\077\107\101\075\001\002\000\004\074\206\001\002" +
    "\000\016\015\uffdb\064\uffdb\065\uffdb\066\uffdb\070\uffe8\072" +
    "\uffdb\001\002\000\010\074\205\076\203\077\204\001\002" +
    "\000\010\015\uffde\064\uffde\066\uffde\001\002\000\020\015" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5" +
    "\001\002\000\004\070\201\001\002\000\010\015\uffd1\064" +
    "\uffd1\066\uffd1\001\002\000\004\030\177\001\002\000\012" +
    "\005\117\016\100\035\111\037\110\001\002\000\020\015" +
    "\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\072\uffee" +
    "\001\002\000\006\064\uffa8\066\uffa8\001\002\000\010\015" +
    "\uffd3\064\uffd3\066\uffd3\001\002\000\006\064\uffb7\065\uffb7" +
    "\001\002\000\010\015\uffdc\064\uffdc\066\uffdc\001\002\000" +
    "\020\015\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb" +
    "\072\uffeb\001\002\000\004\030\172\001\002\000\006\015" +
    "\uffca\066\uffca\001\002\000\014\015\uffda\064\uffda\065\uffda" +
    "\066\uffda\072\uffda\001\002\000\010\074\134\076\132\077" +
    "\133\001\002\000\010\015\uffd4\064\uffd4\066\uffd4\001\002" +
    "\000\010\015\uffd6\064\uffd6\066\uffd6\001\002\000\014\015" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\072\uffd9\001\002\000\004" +
    "\071\122\001\002\000\010\015\uffd2\064\uffd2\066\uffd2\001" +
    "\002\000\010\015\uffdd\064\uffdd\066\uffdd\001\002\000\020" +
    "\050\073\051\113\063\105\074\072\076\102\077\107\101" +
    "\075\001\002\000\006\065\uffcf\072\uffcf\001\002\000\006" +
    "\065\125\072\126\001\002\000\020\050\073\051\113\063" +
    "\105\074\072\076\102\077\107\101\075\001\002\000\004" +
    "\030\127\001\002\000\034\005\117\016\100\032\101\035" +
    "\111\037\110\050\073\051\113\063\105\073\071\074\072" +
    "\076\102\077\107\101\075\001\002\000\010\015\uffd0\064" +
    "\uffd0\066\uffd0\001\002\000\006\065\uffce\072\uffce\001\002" +
    "\000\020\015\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070" +
    "\uffec\072\uffec\001\002\000\020\015\uffe9\064\uffe9\065\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\072\uffe9\001\002\000\020\015" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\072\uffe6" +
    "\001\002\000\004\015\171\001\002\000\010\015\uffcc\064" +
    "\uffcc\066\137\001\002\000\016\007\143\015\uffc8\064\uffc8" +
    "\065\uffb7\066\uffc8\067\uffb7\001\002\000\006\015\uffcb\064" +
    "\uffcb\001\002\000\006\065\013\067\167\001\002\000\010" +
    "\015\uffc9\064\uffc9\066\uffc9\001\002\000\004\074\144\001" +
    "\002\000\006\030\146\067\145\001\002\000\004\074\164" +
    "\001\002\000\024\015\uffc2\050\073\051\113\064\uffc2\066" +
    "\uffc2\074\147\076\102\077\107\101\075\001\002\000\016" +
    "\015\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\072\uffe8\001" +
    "\002\000\010\015\uffc5\064\uffc5\066\162\001\002\000\006" +
    "\065\ufff0\067\ufff0\001\002\000\006\065\154\067\155\001" +
    "\002\000\010\015\uffc4\064\uffc4\066\uffc4\001\002\000\016" +
    "\050\073\051\113\074\147\076\102\077\107\101\075\001" +
    "\002\000\004\063\156\001\002\000\006\064\uffca\066\uffca" +
    "\001\002\000\004\064\160\001\002\000\010\015\uffc1\064" +
    "\uffc1\066\uffc1\001\002\000\006\065\uffef\067\uffef\001\002" +
    "\000\024\015\uffc2\050\073\051\113\064\uffc2\066\uffc2\074" +
    "\147\076\102\077\107\101\075\001\002\000\010\015\uffc3" +
    "\064\uffc3\066\uffc3\001\002\000\004\030\165\001\002\000" +
    "\024\015\uffc2\050\073\051\113\064\uffc2\066\uffc2\074\147" +
    "\076\102\077\107\101\075\001\002\000\010\015\uffc6\064" +
    "\uffc6\066\162\001\002\000\034\005\117\016\100\032\101" +
    "\035\111\037\110\050\073\051\113\063\105\073\071\074" +
    "\072\076\102\077\107\101\075\001\002\000\010\015\uffc7" +
    "\064\uffc7\066\uffc7\001\002\000\010\015\uffcd\064\uffcd\066" +
    "\uffcd\001\002\000\020\050\073\051\113\063\105\074\072" +
    "\076\102\077\107\101\075\001\002\000\010\015\uffc0\064" +
    "\uffc0\066\uffc0\001\002\000\006\064\175\065\013\001\002" +
    "\000\014\015\uffd8\064\uffd8\065\uffd8\066\uffd8\072\uffd8\001" +
    "\002\000\010\015\uffd5\064\uffd5\066\uffd5\001\002\000\034" +
    "\005\117\016\100\032\101\035\111\037\110\050\073\051" +
    "\113\063\105\073\071\074\072\076\102\077\107\101\075" +
    "\001\002\000\010\015\uffbf\064\uffbf\066\uffbf\001\002\000" +
    "\016\050\073\051\113\074\147\076\102\077\107\101\075" +
    "\001\002\000\014\015\uffd7\064\uffd7\065\uffd7\066\uffd7\072" +
    "\uffd7\001\002\000\020\015\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\070\uffed\072\uffed\001\002\000\020\015\uffea\064" +
    "\uffea\065\uffea\066\uffea\067\uffea\070\uffea\072\uffea\001\002" +
    "\000\020\015\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\072\uffe7\001\002\000\010\015\uffbe\064\uffbe\066\uffbe" +
    "\001\002\000\034\005\117\016\100\032\101\035\111\037" +
    "\110\050\073\051\113\063\105\073\071\074\072\076\102" +
    "\077\107\101\075\001\002\000\006\064\uffa9\066\uffa9\001" +
    "\002\000\014\020\066\033\062\044\061\065\uffb7\067\uffb7" +
    "\001\002\000\004\067\213\001\002\000\004\074\214\001" +
    "\002\000\004\066\215\001\002\000\020\006\uffad\010\uffad" +
    "\020\uffad\024\uffad\033\uffad\042\uffad\044\uffad\001\002\000" +
    "\006\064\uffab\066\uffab\001\002\000\010\064\uffa7\065\013" +
    "\066\uffa7\001\002\000\006\065\013\067\221\001\002\000" +
    "\034\005\117\016\100\032\101\035\111\037\110\050\073" +
    "\051\113\063\105\073\071\074\072\076\102\077\107\101" +
    "\075\001\002\000\006\064\uffaa\066\uffaa\001\002\000\010" +
    "\006\uffb3\020\uffb3\033\uffb3\001\002\000\010\006\uffb4\020" +
    "\uffb4\033\uffb4\001\002\000\024\014\uff9e\015\uff9e\043\uff9e" +
    "\047\uff97\062\uff97\063\344\066\uff9e\071\uff97\073\uff97\001" +
    "\002\000\010\015\uff65\043\uff65\066\uff65\001\002\000\032" +
    "\026\272\027\266\050\263\051\276\063\273\071\264\074" +
    "\262\075\302\076\270\077\274\100\275\101\265\001\002" +
    "\000\004\076\u012e\001\002\000\004\063\u012b\001\002\000" +
    "\012\014\uffa1\015\uffa1\043\uffa1\066\uffa1\001\002\000\004" +
    "\067\u0129\001\002\000\032\026\272\027\266\050\263\051" +
    "\276\063\273\071\264\074\262\075\302\076\270\077\274" +
    "\100\275\101\265\001\002\000\004\074\u011f\001\002\000" +
    "\004\063\u0112\001\002\000\012\014\uff99\015\uff99\043\uff99" +
    "\066\uff99\001\002\000\012\014\uff9b\015\uff9b\043\uff9b\066" +
    "\uff9b\001\002\000\032\026\272\027\266\050\263\051\276" +
    "\063\273\071\264\074\262\075\302\076\270\077\274\100" +
    "\275\101\265\001\002\000\012\014\uffa3\015\uffa3\043\uffa3" +
    "\066\uffa3\001\002\000\012\047\u0106\062\317\071\316\073" +
    "\315\001\002\000\012\014\uff98\015\uff98\043\uff98\066\uff98" +
    "\001\002\000\012\014\uffa6\015\uffa6\043\uffa6\066\uffa6\001" +
    "\002\000\012\014\uffa4\015\uffa4\043\uffa4\066\uffa4\001\002" +
    "\000\004\074\373\001\002\000\036\006\050\007\241\017" +
    "\247\021\230\022\234\036\250\043\uff9c\045\227\046\235" +
    "\066\uff9c\074\225\076\233\104\236\105\231\001\002\000" +
    "\012\014\uff9a\015\uff9a\043\uff9a\066\uff9a\001\002\000\006" +
    "\015\254\066\253\001\002\000\040\006\050\007\241\015" +
    "\uff9c\017\247\021\230\022\234\036\250\043\uff9c\045\227" +
    "\046\235\066\uff9c\074\225\076\233\104\236\105\231\001" +
    "\002\000\014\014\uff66\015\uff66\043\uff66\062\uff66\066\uff66" +
    "\001\002\000\010\015\uff64\043\uff64\066\uff64\001\002\000" +
    "\006\043\257\066\253\001\002\000\032\026\272\027\266" +
    "\050\263\051\276\063\273\071\264\074\262\075\302\076" +
    "\270\077\274\100\275\101\265\001\002\000\074\004\uff7e" +
    "\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e\023\uff7e\025" +
    "\uff7e\030\uff7e\031\uff7e\040\uff7e\041\uff7e\043\uff7e\050\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\060\uff7e\061\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e" +
    "\070\uff7e\072\uff7e\001\002\000\062\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\023\350\030\uff8c\031\360\040\uff8c\041\uff8c" +
    "\043\uff8c\050\353\051\347\054\352\055\356\056\357\057" +
    "\355\060\354\061\351\064\uff8c\065\uff8c\066\uff8c\067\uff8c" +
    "\070\uff8c\072\uff8c\001\002\000\104\004\uff97\011\uff97\012" +
    "\uff97\013\uff97\014\uff97\015\uff97\023\uff97\025\uff97\030\uff97" +
    "\031\uff97\040\uff97\041\uff97\043\uff97\050\uff97\051\uff97\052" +
    "\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\061\uff97\062\uff97\063\344\064\uff97\065\uff97\066\uff97\067" +
    "\uff97\070\uff97\071\uff97\072\uff97\073\uff97\001\002\000\026" +
    "\026\272\027\266\063\273\071\264\074\262\075\302\076" +
    "\270\077\274\100\275\101\265\001\002\000\034\026\272" +
    "\027\266\050\263\051\276\063\273\071\264\072\333\074" +
    "\262\075\302\076\270\077\274\100\275\101\265\001\002" +
    "\000\074\004\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015" +
    "\uff73\023\uff73\025\uff73\030\uff73\031\uff73\040\uff73\041\uff73" +
    "\043\uff73\050\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055" +
    "\uff73\056\uff73\057\uff73\060\uff73\061\uff73\064\uff73\065\uff73" +
    "\066\uff73\067\uff73\070\uff73\072\uff73\001\002\000\026\026" +
    "\272\027\266\063\273\071\264\074\262\075\302\076\270" +
    "\077\274\100\275\101\265\001\002\000\074\004\uff70\011" +
    "\uff70\012\uff70\013\uff70\014\uff70\015\uff70\023\uff70\025\uff70" +
    "\030\uff70\031\uff70\040\uff70\041\uff70\043\uff70\050\uff70\051" +
    "\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70" +
    "\060\uff70\061\uff70\064\uff70\065\uff70\066\uff70\067\uff70\070" +
    "\uff70\072\uff70\001\002\000\074\004\uff76\011\uff76\012\uff76" +
    "\013\uff76\014\uff76\015\uff76\023\uff76\025\uff76\030\uff76\031" +
    "\uff76\040\uff76\041\uff76\043\uff76\050\uff76\051\uff76\052\uff76" +
    "\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061" +
    "\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070\uff76\072\uff76" +
    "\001\002\000\012\014\uff5b\015\uff5b\043\uff5b\066\uff5b\001" +
    "\002\000\074\004\uff72\011\uff72\012\uff72\013\uff72\014\uff72" +
    "\015\uff72\023\uff72\025\uff72\030\uff72\031\uff72\040\uff72\041" +
    "\uff72\043\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72" +
    "\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72\064\uff72\065" +
    "\uff72\066\uff72\067\uff72\070\uff72\072\uff72\001\002\000\032" +
    "\026\272\027\266\050\263\051\276\063\273\071\264\074" +
    "\262\075\302\076\270\077\274\100\275\101\265\001\002" +
    "\000\074\004\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015" +
    "\uff75\023\uff75\025\uff75\030\uff75\031\uff75\040\uff75\041\uff75" +
    "\043\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055" +
    "\uff75\056\uff75\057\uff75\060\uff75\061\uff75\064\uff75\065\uff75" +
    "\066\uff75\067\uff75\070\uff75\072\uff75\001\002\000\074\004" +
    "\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\023\uff74" +
    "\025\uff74\030\uff74\031\uff74\040\uff74\041\uff74\043\uff74\050" +
    "\uff74\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74" +
    "\057\uff74\060\uff74\061\uff74\064\uff74\065\uff74\066\uff74\067" +
    "\uff74\070\uff74\072\uff74\001\002\000\026\026\272\027\266" +
    "\063\273\071\264\074\262\075\302\076\270\077\274\100" +
    "\275\101\265\001\002\000\102\004\uff78\011\uff78\012\uff78" +
    "\013\uff78\014\uff78\015\uff78\023\uff78\025\uff78\030\uff78\031" +
    "\uff78\040\uff78\041\uff78\043\uff78\050\uff78\051\uff78\052\uff78" +
    "\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061" +
    "\uff78\062\317\064\uff78\065\uff78\066\uff78\067\uff78\070\uff78" +
    "\071\316\072\uff78\073\315\001\002\000\074\004\uff6f\011" +
    "\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\023\uff6f\025\uff6f" +
    "\030\uff6f\031\uff6f\040\uff6f\041\uff6f\043\uff6f\050\uff6f\051" +
    "\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f" +
    "\060\uff6f\061\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f\070" +
    "\uff6f\072\uff6f\001\002\000\074\004\304\011\306\012\uff84" +
    "\013\uff84\014\uff84\015\uff84\023\uff84\025\303\030\uff84\031" +
    "\uff84\040\uff84\041\uff84\043\uff84\050\uff84\051\uff84\052\307" +
    "\053\305\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061" +
    "\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\072\uff84" +
    "\001\002\000\074\004\uff77\011\uff77\012\uff77\013\uff77\014" +
    "\uff77\015\uff77\023\uff77\025\uff77\030\uff77\031\uff77\040\uff77" +
    "\041\uff77\043\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054" +
    "\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77\064\uff77" +
    "\065\uff77\066\uff77\067\uff77\070\uff77\072\uff77\001\002\000" +
    "\026\026\272\027\266\063\273\071\264\074\262\075\302" +
    "\076\270\077\274\100\275\101\265\001\002\000\026\026" +
    "\272\027\266\063\273\071\264\074\262\075\302\076\270" +
    "\077\274\100\275\101\265\001\002\000\026\026\272\027" +
    "\266\063\273\071\264\074\262\075\302\076\270\077\274" +
    "\100\275\101\265\001\002\000\026\026\272\027\266\063" +
    "\273\071\264\074\262\075\302\076\270\077\274\100\275" +
    "\101\265\001\002\000\026\026\272\027\266\063\273\071" +
    "\264\074\262\075\302\076\270\077\274\100\275\101\265" +
    "\001\002\000\074\004\uff7d\011\uff7d\012\uff7d\013\uff7d\014" +
    "\uff7d\015\uff7d\023\uff7d\025\uff7d\030\uff7d\031\uff7d\040\uff7d" +
    "\041\uff7d\043\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054" +
    "\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\064\uff7d" +
    "\065\uff7d\066\uff7d\067\uff7d\070\uff7d\072\uff7d\001\002\000" +
    "\074\004\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b" +
    "\023\uff7b\025\uff7b\030\uff7b\031\uff7b\040\uff7b\041\uff7b\043" +
    "\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b" +
    "\056\uff7b\057\uff7b\060\uff7b\061\uff7b\064\uff7b\065\uff7b\066" +
    "\uff7b\067\uff7b\070\uff7b\072\uff7b\001\002\000\074\004\uff7c" +
    "\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\023\uff7c\025" +
    "\uff7c\030\uff7c\031\uff7c\040\uff7c\041\uff7c\043\uff7c\050\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057" +
    "\uff7c\060\uff7c\061\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c" +
    "\070\uff7c\072\uff7c\001\002\000\074\004\uff79\011\uff79\012" +
    "\uff79\013\uff79\014\uff79\015\uff79\023\uff79\025\uff79\030\uff79" +
    "\031\uff79\040\uff79\041\uff79\043\uff79\050\uff79\051\uff79\052" +
    "\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79" +
    "\061\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79\072" +
    "\uff79\001\002\000\074\004\uff7a\011\uff7a\012\uff7a\013\uff7a" +
    "\014\uff7a\015\uff7a\023\uff7a\025\uff7a\030\uff7a\031\uff7a\040" +
    "\uff7a\041\uff7a\043\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a" +
    "\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\064" +
    "\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\072\uff7a\001\002" +
    "\000\104\004\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\023\uff94\025\uff94\030\uff94\031\uff94\040\uff94\041\uff94" +
    "\043\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054" +
    "\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94" +
    "\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072" +
    "\uff94\073\uff94\001\002\000\032\026\272\027\266\050\263" +
    "\051\276\063\273\071\264\074\262\075\302\076\270\077" +
    "\274\100\275\101\265\001\002\000\004\074\320\001\002" +
    "\000\104\004\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015" +
    "\uff95\023\uff95\025\uff95\030\uff95\031\uff95\040\uff95\041\uff95" +
    "\043\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054" +
    "\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95" +
    "\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072" +
    "\uff95\073\uff95\001\002\000\006\065\323\072\324\001\002" +
    "\000\010\064\uff8e\065\uff8e\072\uff8e\001\002\000\032\026" +
    "\272\027\266\050\263\051\276\063\273\071\264\074\262" +
    "\075\302\076\270\077\274\100\275\101\265\001\002\000" +
    "\104\004\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96" +
    "\023\uff96\025\uff96\030\uff96\031\uff96\040\uff96\041\uff96\043" +
    "\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\064" +
    "\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96" +
    "\073\uff96\001\002\000\010\064\uff8d\065\uff8d\072\uff8d\001" +
    "\002\000\074\004\304\011\306\012\uff82\013\uff82\014\uff82" +
    "\015\uff82\023\uff82\025\303\030\uff82\031\uff82\040\uff82\041" +
    "\uff82\043\uff82\050\uff82\051\uff82\052\307\053\305\054\uff82" +
    "\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\064\uff82\065" +
    "\uff82\066\uff82\067\uff82\070\uff82\072\uff82\001\002\000\004" +
    "\064\330\001\002\000\074\004\uff71\011\uff71\012\uff71\013" +
    "\uff71\014\uff71\015\uff71\023\uff71\025\uff71\030\uff71\031\uff71" +
    "\040\uff71\041\uff71\043\uff71\050\uff71\051\uff71\052\uff71\053" +
    "\uff71\054\uff71\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71" +
    "\064\uff71\065\uff71\066\uff71\067\uff71\070\uff71\072\uff71\001" +
    "\002\000\074\004\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e" +
    "\015\uff6e\023\uff6e\025\uff6e\030\uff6e\031\uff6e\040\uff6e\041" +
    "\uff6e\043\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e" +
    "\055\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\064\uff6e\065" +
    "\uff6e\066\uff6e\067\uff6e\070\uff6e\072\uff6e\001\002\000\010" +
    "\065\uff68\070\341\072\uff68\001\002\000\074\004\uff6b\011" +
    "\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\023\uff6b\025\uff6b" +
    "\030\uff6b\031\uff6b\040\uff6b\041\uff6b\043\uff6b\050\uff6b\051" +
    "\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b" +
    "\060\uff6b\061\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b\070" +
    "\uff6b\072\uff6b\001\002\000\006\065\uff6a\072\uff6a\001\002" +
    "\000\006\065\336\072\337\001\002\000\032\026\272\027" +
    "\266\050\263\051\276\063\273\071\264\074\262\075\302" +
    "\076\270\077\274\100\275\101\265\001\002\000\074\004" +
    "\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\023\uff6c" +
    "\025\uff6c\030\uff6c\031\uff6c\040\uff6c\041\uff6c\043\uff6c\050" +
    "\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c" +
    "\057\uff6c\060\uff6c\061\uff6c\064\uff6c\065\uff6c\066\uff6c\067" +
    "\uff6c\070\uff6c\072\uff6c\001\002\000\006\065\uff69\072\uff69" +
    "\001\002\000\032\026\272\027\266\050\263\051\276\063" +
    "\273\071\264\074\262\075\302\076\270\077\274\100\275" +
    "\101\265\001\002\000\006\065\uff67\072\uff67\001\002\000" +
    "\074\004\304\011\306\012\uff83\013\uff83\014\uff83\015\uff83" +
    "\023\uff83\025\303\030\uff83\031\uff83\040\uff83\041\uff83\043" +
    "\uff83\050\uff83\051\uff83\052\307\053\305\054\uff83\055\uff83" +
    "\056\uff83\057\uff83\060\uff83\061\uff83\064\uff83\065\uff83\066" +
    "\uff83\067\uff83\070\uff83\072\uff83\001\002\000\032\026\272" +
    "\027\266\050\263\051\276\063\273\071\264\074\262\075" +
    "\302\076\270\077\274\100\275\101\265\001\002\000\006" +
    "\064\346\065\323\001\002\000\074\004\uff6d\011\uff6d\012" +
    "\uff6d\013\uff6d\014\uff6d\015\uff6d\023\uff6d\025\uff6d\030\uff6d" +
    "\031\uff6d\040\uff6d\041\uff6d\043\uff6d\050\uff6d\051\uff6d\052" +
    "\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d" +
    "\061\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\072" +
    "\uff6d\001\002\000\026\026\272\027\266\063\273\071\264" +
    "\074\262\075\302\076\270\077\274\100\275\101\265\001" +
    "\002\000\032\026\272\027\266\050\263\051\276\063\273" +
    "\071\264\074\262\075\302\076\270\077\274\100\275\101" +
    "\265\001\002\000\032\026\272\027\266\050\263\051\276" +
    "\063\273\071\264\074\262\075\302\076\270\077\274\100" +
    "\275\101\265\001\002\000\032\026\272\027\266\050\263" +
    "\051\276\063\273\071\264\074\262\075\302\076\270\077" +
    "\274\100\275\101\265\001\002\000\026\026\272\027\266" +
    "\063\273\071\264\074\262\075\302\076\270\077\274\100" +
    "\275\101\265\001\002\000\032\026\272\027\266\050\263" +
    "\051\276\063\273\071\264\074\262\075\302\076\270\077" +
    "\274\100\275\101\265\001\002\000\032\026\272\027\266" +
    "\050\263\051\276\063\273\071\264\074\262\075\302\076" +
    "\270\077\274\100\275\101\265\001\002\000\032\026\272" +
    "\027\266\050\263\051\276\063\273\071\264\074\262\075" +
    "\302\076\270\077\274\100\275\101\265\001\002\000\032" +
    "\026\272\027\266\050\263\051\276\063\273\071\264\074" +
    "\262\075\302\076\270\077\274\100\275\101\265\001\002" +
    "\000\026\026\272\027\266\063\273\071\264\074\262\075" +
    "\302\076\270\077\274\100\275\101\265\001\002\000\074" +
    "\004\304\011\306\012\uff7f\013\uff7f\014\uff7f\015\uff7f\023" +
    "\uff7f\025\303\030\uff7f\031\uff7f\040\uff7f\041\uff7f\043\uff7f" +
    "\050\uff7f\051\uff7f\052\307\053\305\054\uff7f\055\uff7f\056" +
    "\uff7f\057\uff7f\060\uff7f\061\uff7f\064\uff7f\065\uff7f\066\uff7f" +
    "\067\uff7f\070\uff7f\072\uff7f\001\002\000\044\012\uff89\013" +
    "\uff89\014\uff89\015\uff89\030\uff89\031\360\040\uff89\041\uff89" +
    "\043\uff89\050\353\051\347\064\uff89\065\uff89\066\uff89\067" +
    "\uff89\070\uff89\072\uff89\001\002\000\044\012\uff8a\013\uff8a" +
    "\014\uff8a\015\uff8a\030\uff8a\031\360\040\uff8a\041\uff8a\043" +
    "\uff8a\050\353\051\347\064\uff8a\065\uff8a\066\uff8a\067\uff8a" +
    "\070\uff8a\072\uff8a\001\002\000\044\012\uff87\013\uff87\014" +
    "\uff87\015\uff87\030\uff87\031\360\040\uff87\041\uff87\043\uff87" +
    "\050\353\051\347\064\uff87\065\uff87\066\uff87\067\uff87\070" +
    "\uff87\072\uff87\001\002\000\044\012\uff88\013\uff88\014\uff88" +
    "\015\uff88\030\uff88\031\360\040\uff88\041\uff88\043\uff88\050" +
    "\353\051\347\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88" +
    "\072\uff88\001\002\000\074\004\304\011\306\012\uff81\013" +
    "\uff81\014\uff81\015\uff81\023\uff81\025\303\030\uff81\031\uff81" +
    "\040\uff81\041\uff81\043\uff81\050\uff81\051\uff81\052\307\053" +
    "\305\054\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81" +
    "\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81\072\uff81\001" +
    "\002\000\044\012\uff8b\013\uff8b\014\uff8b\015\uff8b\030\uff8b" +
    "\031\360\040\uff8b\041\uff8b\043\uff8b\050\353\051\347\064" +
    "\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\072\uff8b\001\002" +
    "\000\044\012\uff86\013\uff86\014\uff86\015\uff86\030\uff86\031" +
    "\360\040\uff86\041\uff86\043\uff86\050\353\051\347\064\uff86" +
    "\065\uff86\066\uff86\067\uff86\070\uff86\072\uff86\001\002\000" +
    "\044\012\uff85\013\uff85\014\uff85\015\uff85\030\uff85\031\360" +
    "\040\uff85\041\uff85\043\uff85\050\353\051\347\064\uff85\065" +
    "\uff85\066\uff85\067\uff85\070\uff85\072\uff85\001\002\000\074" +
    "\004\304\011\306\012\uff80\013\uff80\014\uff80\015\uff80\023" +
    "\uff80\025\303\030\uff80\031\uff80\040\uff80\041\uff80\043\uff80" +
    "\050\uff80\051\uff80\052\307\053\305\054\uff80\055\uff80\056" +
    "\uff80\057\uff80\060\uff80\061\uff80\064\uff80\065\uff80\066\uff80" +
    "\067\uff80\070\uff80\072\uff80\001\002\000\004\047\374\001" +
    "\002\000\032\026\272\027\266\050\263\051\276\063\273" +
    "\071\264\074\262\075\302\076\270\077\274\100\275\101" +
    "\265\001\002\000\006\013\377\041\376\001\002\000\032" +
    "\026\272\027\266\050\263\051\276\063\273\071\264\074" +
    "\262\075\302\076\270\077\274\100\275\101\265\001\002" +
    "\000\032\026\272\027\266\050\263\051\276\063\273\071" +
    "\264\074\262\075\302\076\270\077\274\100\275\101\265" +
    "\001\002\000\004\012\u0101\001\002\000\042\006\050\007" +
    "\241\014\uff9c\015\uff9c\017\247\021\230\022\234\036\250" +
    "\043\uff9c\045\227\046\235\066\uff9c\074\225\076\233\104" +
    "\236\105\231\001\002\000\012\014\uff59\015\uff59\043\uff59" +
    "\066\uff59\001\002\000\004\012\u0104\001\002\000\042\006" +
    "\050\007\241\014\uff9c\015\uff9c\017\247\021\230\022\234" +
    "\036\250\043\uff9c\045\227\046\235\066\uff9c\074\225\076" +
    "\233\104\236\105\231\001\002\000\012\014\uff5a\015\uff5a" +
    "\043\uff5a\066\uff5a\001\002\000\032\026\272\027\266\050" +
    "\263\051\276\063\273\071\264\074\262\075\302\076\270" +
    "\077\274\100\275\101\265\001\002\000\012\014\uffa2\015" +
    "\uffa2\043\uffa2\066\uffa2\001\002\000\004\030\u0109\001\002" +
    "\000\022\015\uff5e\050\073\051\113\066\uff5e\074\147\076" +
    "\102\077\107\101\075\001\002\000\006\015\u0110\066\u010f" +
    "\001\002\000\006\065\154\067\u010d\001\002\000\006\015" +
    "\uff60\066\uff60\001\002\000\036\006\050\007\241\015\uff9c" +
    "\017\247\021\230\022\234\036\250\045\227\046\235\066" +
    "\uff9c\074\225\076\233\104\236\105\231\001\002\000\006" +
    "\015\uff5d\066\uff5d\001\002\000\022\015\uff5e\050\073\051" +
    "\113\066\uff5e\074\147\076\102\077\107\101\075\001\002" +
    "\000\012\014\uff61\015\uff61\043\uff61\066\uff61\001\002\000" +
    "\006\015\uff5f\066\uff5f\001\002\000\032\026\272\027\266" +
    "\050\263\051\276\063\273\071\264\074\262\075\302\076" +
    "\270\077\274\100\275\101\265\001\002\000\010\064\uff91" +
    "\065\uff91\067\u0119\001\002\000\006\064\u0117\065\u0116\001" +
    "\002\000\006\064\uff93\065\uff93\001\002\000\032\026\272" +
    "\027\266\050\263\051\276\063\273\071\264\074\262\075" +
    "\302\076\270\077\274\100\275\101\265\001\002\000\012" +
    "\014\uffa0\015\uffa0\043\uffa0\066\uffa0\001\002\000\006\064" +
    "\uff92\065\uff92\001\002\000\032\026\272\027\266\050\263" +
    "\051\276\063\273\071\264\074\262\075\302\076\270\077" +
    "\274\100\275\101\265\001\002\000\010\064\uff90\065\uff90" +
    "\067\u011b\001\002\000\032\026\272\027\266\050\263\051" +
    "\276\063\273\071\264\074\262\075\302\076\270\077\274" +
    "\100\275\101\265\001\002\000\006\064\uff8f\065\uff8f\001" +
    "\002\000\006\012\u0121\065\u0120\001\002\000\014\012\uff57" +
    "\062\317\065\uff57\071\316\073\315\001\002\000\014\012" +
    "\uff97\062\uff97\065\uff97\071\uff97\073\uff97\001\002\000\004" +
    "\074\u011f\001\002\000\042\006\050\007\241\014\uff9c\015" +
    "\uff9c\017\247\021\230\022\234\036\250\043\uff9c\045\227" +
    "\046\235\066\uff9c\074\225\076\233\104\236\105\231\001" +
    "\002\000\012\014\uff58\015\uff58\043\uff58\066\uff58\001\002" +
    "\000\014\012\uff56\062\317\065\uff56\071\316\073\315\001" +
    "\002\000\004\040\u0125\001\002\000\042\006\050\007\241" +
    "\014\uff9c\015\uff9c\017\247\021\230\022\234\036\250\043" +
    "\uff9c\045\227\046\235\066\uff9c\074\225\076\233\104\236" +
    "\105\231\001\002\000\012\014\u0127\015\uff63\043\uff63\066" +
    "\uff63\001\002\000\042\006\050\007\241\014\uff9c\015\uff9c" +
    "\017\247\021\230\022\234\036\250\043\uff9c\045\227\046" +
    "\235\066\uff9c\074\225\076\233\104\236\105\231\001\002" +
    "\000\012\014\uff62\015\uff62\043\uff62\066\uff62\001\002\000" +
    "\040\006\050\007\241\014\uff9c\015\uff9c\017\247\021\230" +
    "\022\234\036\250\043\uff9c\045\227\046\235\066\uff9c\074" +
    "\225\104\236\105\231\001\002\000\012\014\uffa5\015\uffa5" +
    "\043\uffa5\066\uffa5\001\002\000\032\026\272\027\266\050" +
    "\263\051\276\063\273\071\264\074\262\075\302\076\270" +
    "\077\274\100\275\101\265\001\002\000\006\064\u012d\065" +
    "\u0116\001\002\000\012\014\uff9f\015\uff9f\043\uff9f\066\uff9f" +
    "\001\002\000\012\014\uff9d\015\uff9d\043\uff9d\066\uff9d\001" +
    "\002\000\004\012\u0130\001\002\000\042\006\050\007\241" +
    "\014\uff9c\015\uff9c\017\247\021\230\022\234\036\250\043" +
    "\uff9c\045\227\046\235\066\uff9c\074\225\076\233\104\236" +
    "\105\231\001\002\000\012\014\uff5c\015\uff5c\043\uff5c\066" +
    "\uff5c\001\002\000\004\066\uffb1\001\002\000\006\063\u0134" +
    "\066\u0135\001\002\000\014\020\066\033\062\044\061\065" +
    "\uffb7\067\uffb7\001\002\000\020\006\uffb0\010\uffb0\020\uffb0" +
    "\024\uffb0\033\uffb0\042\uffb0\044\uffb0\001\002\000\006\064" +
    "\u0137\066\211\001\002\000\004\066\u0138\001\002\000\020" +
    "\006\uffaf\010\uffaf\020\uffaf\024\uffaf\033\uffaf\042\uffaf\044" +
    "\uffaf\001\002\000\004\066\uffb2\001\002\000\004\066\u013b" +
    "\001\002\000\014\006\uffbb\020\uffbb\033\uffbb\065\uffb7\067" +
    "\uffb7\001\002\000\004\066\uffb9\001\002\000\006\065\013" +
    "\067\u013e\001\002\000\034\005\117\016\100\032\101\035" +
    "\111\037\110\050\073\051\113\063\105\073\071\074\072" +
    "\076\102\077\107\101\075\001\002\000\004\066\uffb8\001" +
    "\002\000\004\066\uffe1\001\002\000\004\066\u0145\001\002" +
    "\000\004\054\u0143\001\002\000\034\005\117\016\100\032" +
    "\101\035\111\037\110\050\073\051\113\063\105\073\071" +
    "\074\072\076\102\077\107\101\075\001\002\000\004\066" +
    "\uffdf\001\002\000\014\006\uffe2\020\uffe2\033\uffe2\044\uffe2" +
    "\074\u0142\001\002\000\004\066\uffe0\001\002\000\006\065" +
    "\ufff3\066\ufff3\001\002\000\006\065\u014c\066\u014d\001\002" +
    "\000\004\054\u014a\001\002\000\016\050\073\051\113\074" +
    "\147\076\102\077\107\101\075\001\002\000\006\065\ufff1" +
    "\066\ufff1\001\002\000\004\074\u0149\001\002\000\014\006" +
    "\ufff4\020\ufff4\033\ufff4\042\ufff4\044\ufff4\001\002\000\006" +
    "\065\ufff2\066\ufff2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\004\020\005\016\006\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\033\012\031\001\001\000\006\007\023\010\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\u0147\014\u0146\001\001\000\006" +
    "\017\036\020\034\001\001\000\002\001\001\000\006\021" +
    "\u0140\022\u013f\001\001\000\006\045\041\046\040\001\001" +
    "\000\004\047\u0139\001\001\000\002\001\001\000\004\052" +
    "\042\001\001\000\014\053\050\054\051\055\044\056\046" +
    "\101\043\001\001\000\002\001\001\000\010\004\u0138\005" +
    "\016\006\021\001\001\000\002\001\001\000\010\004\u0131" +
    "\005\016\006\021\001\001\000\030\061\225\062\244\063" +
    "\245\064\241\065\242\075\231\101\237\102\251\103\250" +
    "\106\236\107\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\051\063" +
    "\057\062\060\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\217\001\001\000\004" +
    "\051\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\066\001\001\000\002\001\001" +
    "\000\032\016\075\023\102\024\073\025\111\026\115\027" +
    "\120\030\114\031\113\033\103\042\117\043\076\044\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\030\175\031" +
    "\113\033\103\042\117\043\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\134\035\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\075\024\122\025\111\026\115\032\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\075\024\130\025\111\026\115\001\001\000\002\001\001" +
    "\000\032\016\075\023\127\024\073\025\111\026\115\027" +
    "\120\030\114\031\113\033\103\042\117\043\076\044\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\036\141\037\137\051\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\151\016\150\040\147\041\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\160\001\001\000\002" +
    "\001\001\000\006\034\156\035\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\151" +
    "\016\150\041\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\151\016\150\040\165\041\152\001\001" +
    "\000\002\001\001\000\032\016\075\023\167\024\073\025" +
    "\111\026\115\027\120\030\114\031\113\033\103\042\117" +
    "\043\076\044\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\075\024\172\025\111\026\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\016\075\023\177\024\073\025\111" +
    "\026\115\027\120\030\114\031\113\033\103\042\117\043" +
    "\076\044\105\001\001\000\002\001\001\000\004\016\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\016\075" +
    "\023\207\024\073\025\111\026\115\027\120\030\114\031" +
    "\113\033\103\042\117\043\076\044\105\001\001\000\002" +
    "\001\001\000\006\051\063\060\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\016\075\023\221\024\073\025\111\026\115\027\120" +
    "\030\114\031\113\033\103\042\117\043\076\044\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\065\276\071" +
    "\u012e\072\260\073\300\074\257\075\266\076\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\065\276\071\u0123\072\260\073\300" +
    "\074\257\075\266\076\277\001\001\000\006\065\u011d\110" +
    "\u011c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\065\276\071\u0107\072\260\073\300\074" +
    "\257\075\266\076\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\061\225\062\244\063\245" +
    "\064\241\065\242\075\231\101\237\102\255\103\250\106" +
    "\236\107\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\061\254\062\244\063\245\064\241\065\242\075" +
    "\231\101\237\103\250\106\236\107\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\065" +
    "\276\071\270\072\260\073\300\074\257\075\266\076\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\065\276\073\342\074\257\075\266\076\277" +
    "\001\001\000\024\065\276\071\331\072\260\073\300\074" +
    "\257\075\266\076\277\077\334\100\333\001\001\000\002" +
    "\001\001\000\012\065\276\074\330\075\266\076\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\065\276\071\326\072\260\073" +
    "\300\074\257\075\266\076\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\065\276\073\325\074\257\075" +
    "\266\076\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\065\276\074" +
    "\313\075\266\076\277\001\001\000\012\065\276\074\312" +
    "\075\266\076\277\001\001\000\012\065\276\074\311\075" +
    "\266\076\277\001\001\000\012\065\276\074\310\075\266" +
    "\076\277\001\001\000\012\065\276\074\307\075\266\076" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\065\276\067\320\071\321\072\260\073\300" +
    "\074\257\075\266\076\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\065\276\071\324\072\260\073\300\074\257\075\266\076" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\065\276\071\331\072\260\073" +
    "\300\074\257\075\266\076\277\100\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\065\276\071\341\072" +
    "\260\073\300\074\257\075\266\076\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\065\276\067\344\071" +
    "\321\072\260\073\300\074\257\075\266\076\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\065\276\073" +
    "\371\074\257\075\266\076\277\001\001\000\016\065\276" +
    "\072\370\073\300\074\257\075\266\076\277\001\001\000" +
    "\016\065\276\072\367\073\300\074\257\075\266\076\277" +
    "\001\001\000\016\065\276\072\366\073\300\074\257\075" +
    "\266\076\277\001\001\000\014\065\276\073\365\074\257" +
    "\075\266\076\277\001\001\000\016\065\276\072\364\073" +
    "\300\074\257\075\266\076\277\001\001\000\016\065\276" +
    "\072\363\073\300\074\257\075\266\076\277\001\001\000" +
    "\016\065\276\072\362\073\300\074\257\075\266\076\277" +
    "\001\001\000\016\065\276\072\361\073\300\074\257\075" +
    "\266\076\277\001\001\000\014\065\276\073\360\074\257" +
    "\075\266\076\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\065\276\071\374\072\260\073\300\074\257\075\266\076" +
    "\277\001\001\000\002\001\001\000\020\065\276\071\u0102" +
    "\072\260\073\300\074\257\075\266\076\277\001\001\000" +
    "\020\065\276\071\377\072\260\073\300\074\257\075\266" +
    "\076\277\001\001\000\002\001\001\000\026\061\u0101\062" +
    "\244\063\245\064\241\065\242\075\231\101\237\103\250" +
    "\106\236\107\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\061\u0104\062\244\063\245\064\241\065\242" +
    "\075\231\101\237\103\250\106\236\107\243\001\001\000" +
    "\002\001\001\000\020\065\276\071\u0106\072\260\073\300" +
    "\074\257\075\266\076\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\u010a\016\150\104\u0109\105\u010b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\061\u010d\062\244\063\245\064\241\065\242" +
    "\075\231\101\237\103\250\106\236\107\243\001\001\000" +
    "\002\001\001\000\010\015\u010a\016\150\105\u0110\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\065\276\066" +
    "\u0113\070\u0114\071\u0112\072\260\073\300\074\257\075\266" +
    "\076\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\065\276\070\u0117\071\u0112\072\260" +
    "\073\300\074\257\075\266\076\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\065\276\071\u0119\072\260" +
    "\073\300\074\257\075\266\076\277\001\001\000\002\001" +
    "\001\000\020\065\276\071\u011b\072\260\073\300\074\257" +
    "\075\266\076\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\u0122" +
    "\001\001\000\026\061\u0121\062\244\063\245\064\241\065" +
    "\242\075\231\101\237\103\250\106\236\107\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\061\u0125\062\244\063\245\064\241\065\242\075\231" +
    "\101\237\103\250\106\236\107\243\001\001\000\002\001" +
    "\001\000\026\061\u0127\062\244\063\245\064\241\065\242" +
    "\075\231\101\237\103\250\106\236\107\243\001\001\000" +
    "\002\001\001\000\024\062\u0129\063\245\064\241\065\242" +
    "\075\231\101\237\103\250\106\236\107\243\001\001\000" +
    "\002\001\001\000\024\065\276\066\u012b\070\u0114\071\u0112" +
    "\072\260\073\300\074\257\075\266\076\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\061\u0130\062\244\063\245\064\241\065" +
    "\242\075\231\101\237\103\250\106\236\107\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\051\063\057\u0135\060\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\u013b\051\u013c" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\016" +
    "\075\023\u013e\024\073\025\111\026\115\027\120\030\114" +
    "\031\113\033\103\042\117\043\076\044\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\075\023\u0143\024\073\025\111\026" +
    "\115\027\120\030\114\031\113\033\103\042\117\043\076" +
    "\044\105\001\001\000\002\001\001\000\004\022\u0145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u014a\001\001\000\002\001" +
    "\001\000\004\014\u014d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at "+cur_token);
    }
    public static void newScope(){
	typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
	typenames.pop();
    }
    public static boolean lookupType(String name){
	for (HashSet<String> scope: typenames)
	    if (scope.contains(name)) return true;
	return false;
    }
    public static void addType(String name){
	typenames.peek().add(name);
    }
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
	super(lex,sf);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
                XMLElement RESULT;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location EOF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location EOF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object EOF1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("_START",0,(XMLElement)start_val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ProgramHeading Block DOT 
            {
                XMLElement RESULT;
		Location ProgramHeading0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ProgramHeading0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ProgramHeading0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location Block1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location Block1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object Block1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location DOT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location DOT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object DOT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Program",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramHeading ::= PROGRAM IDENT SEMICOLON 
            {
                XMLElement RESULT;
		Location PROGRAM0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location PROGRAM0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object PROGRAM0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProgramHeading",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramHeading",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramHeading ::= PROGRAM IDENT LEFT IdentList RIGHT SEMICOLON 
            {
                XMLElement RESULT;
		Location PROGRAM0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location PROGRAM0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object PROGRAM0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location LEFT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location LEFT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object LEFT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location IdentList3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IdentList3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IdentList3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location RIGHT4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location RIGHT4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object RIGHT4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProgramHeading",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramHeading",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= LabelDeclOpt ConstantDeclOpt TypeDeclOpt VarDeclOpt ProcDeclrList CompoundStmt 
            {
                XMLElement RESULT;
		Location LabelDeclOpt0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location LabelDeclOpt0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object LabelDeclOpt0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location ConstantDeclOpt1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ConstantDeclOpt1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object ConstantDeclOpt1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location TypeDeclOpt2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location TypeDeclOpt2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object TypeDeclOpt2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location VarDeclOpt3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location VarDeclOpt3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object VarDeclOpt3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ProcDeclrList4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ProcDeclrList4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ProcDeclrList4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location CompoundStmt5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location CompoundStmt5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object CompoundStmt5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Block",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LabelDeclOpt ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("LabelDeclOpt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelDeclOpt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LabelDeclOpt ::= LabelDecl 
            {
                XMLElement RESULT;
		Location LabelDecl0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location LabelDecl0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object LabelDecl0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LabelDeclOpt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelDeclOpt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LabelDecl ::= LABEL LabelDeclrList SEMICOLON 
            {
                XMLElement RESULT;
		Location LABEL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LABEL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LABEL0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location LabelDeclrList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location LabelDeclrList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object LabelDeclrList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LabelDecl",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LabelDeclrList ::= LabelDeclr 
            {
                XMLElement RESULT;
		Location LabelDeclr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location LabelDeclr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object LabelDeclr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LabelDeclrList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelDeclrList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LabelDeclrList ::= LabelDeclrList COMMA LabelDeclr 
            {
                XMLElement RESULT;
		Location LabelDeclrList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LabelDeclrList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LabelDeclrList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location LabelDeclr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location LabelDeclr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object LabelDeclr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LabelDeclrList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelDeclrList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LabelDeclr ::= INTCONST 
            {
                XMLElement RESULT;
		Location INTCONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location INTCONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object INTCONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LabelDeclr",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabelDeclr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstantDeclOpt ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("ConstantDeclOpt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantDeclOpt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstantDeclOpt ::= ConstantDecl 
            {
                XMLElement RESULT;
		Location ConstantDecl0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ConstantDecl0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ConstantDecl0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstantDeclOpt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantDeclOpt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstantDecl ::= CONST ConstDeclrList SEMICOLON 
            {
                XMLElement RESULT;
		Location CONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location CONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object CONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ConstDeclrList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ConstDeclrList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ConstDeclrList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstantDecl",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDeclrList ::= ConstDeclr 
            {
                XMLElement RESULT;
		Location ConstDeclr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ConstDeclr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ConstDeclr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstDeclrList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclrList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDeclrList ::= ConstDeclrList COMMA ConstDeclr 
            {
                XMLElement RESULT;
		Location ConstDeclrList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ConstDeclrList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ConstDeclrList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ConstDeclr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ConstDeclr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ConstDeclr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstDeclrList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclrList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDeclr ::= IDENT EQ Constant 
            {
                XMLElement RESULT;
		Location IDENT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IDENT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IDENT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location EQ1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location EQ1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object EQ1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Constant2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Constant2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Constant2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstDeclr",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstantList ::= Constant 
            {
                XMLElement RESULT;
		Location Constant0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Constant0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Constant0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstantList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstantList ::= ConstantList COMMA Constant 
            {
                XMLElement RESULT;
		Location ConstantList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ConstantList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ConstantList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Constant2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Constant2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Constant2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConstantList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstantList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= INTCONST 
            {
                XMLElement RESULT;
		Location INTCONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location INTCONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object INTCONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= PLUS INTCONST 
            {
                XMLElement RESULT;
		Location PLUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PLUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PLUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location INTCONST1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location INTCONST1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object INTCONST1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= MINUS INTCONST 
            {
                XMLElement RESULT;
		Location MINUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MINUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MINUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location INTCONST1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location INTCONST1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object INTCONST1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= REALCONST 
            {
                XMLElement RESULT;
		Location REALCONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location REALCONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object REALCONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= PLUS REALCONST 
            {
                XMLElement RESULT;
		Location PLUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PLUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PLUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location REALCONST1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location REALCONST1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object REALCONST1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",4);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= MINUS REALCONST 
            {
                XMLElement RESULT;
		Location MINUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MINUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MINUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location REALCONST1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location REALCONST1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object REALCONST1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",5);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Constant ::= IDENT 
            {
                XMLElement RESULT;
		Location IDENT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IDENT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IDENT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",6);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Constant ::= PLUS IDENT 
            {
                XMLElement RESULT;
		Location PLUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PLUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PLUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",7);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Constant ::= MINUS IDENT 
            {
                XMLElement RESULT;
		Location MINUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MINUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MINUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",8);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Constant ::= STRINGCONST 
            {
                XMLElement RESULT;
		Location STRINGCONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location STRINGCONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object STRINGCONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Constant",9);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TypeDeclOpt ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("TypeDeclOpt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclOpt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TypeDeclOpt ::= TypeDecl 
            {
                XMLElement RESULT;
		Location TypeDecl0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location TypeDecl0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object TypeDecl0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDeclOpt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclOpt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TypeDecl ::= TYPE TypeDeclrList SEMICOLON 
            {
                XMLElement RESULT;
		Location TYPE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location TYPE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object TYPE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location TypeDeclrList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location TypeDeclrList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object TypeDeclrList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDecl",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TypeDeclrList ::= TypeDeclr 
            {
                XMLElement RESULT;
		Location TypeDeclr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location TypeDeclr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object TypeDeclr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDeclrList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclrList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeDeclrList ::= TypeDeclrList SEMICOLON TypeDeclr 
            {
                XMLElement RESULT;
		Location TypeDeclrList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location TypeDeclrList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object TypeDeclrList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location TypeDeclr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location TypeDeclr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object TypeDeclr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDeclrList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclrList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeDeclr ::= IDENT EQ Type 
            {
                XMLElement RESULT;
		Location IDENT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IDENT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IDENT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location EQ1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location EQ1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object EQ1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Type2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Type2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Type2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("TypeDeclr",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= SimpleType 
            {
                XMLElement RESULT;
		Location SimpleType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Type",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= StructuredType 
            {
                XMLElement RESULT;
		Location StructuredType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location StructuredType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object StructuredType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Type",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= PointerType 
            {
                XMLElement RESULT;
		Location PointerType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location PointerType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object PointerType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Type",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SimpleType ::= IDENT 
            {
                XMLElement RESULT;
		Location IDENT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IDENT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IDENT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleType",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SimpleType ::= ScalarType 
            {
                XMLElement RESULT;
		Location ScalarType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ScalarType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ScalarType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleType",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SimpleType ::= SubrangeType 
            {
                XMLElement RESULT;
		Location SubrangeType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SubrangeType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SubrangeType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleType",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ScalarType ::= LEFT IdentList RIGHT 
            {
                XMLElement RESULT;
		Location LEFT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location IdentList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location IdentList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object IdentList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ScalarType",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ScalarType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SubrangeType ::= Constant DOTDOT Constant 
            {
                XMLElement RESULT;
		Location Constant0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Constant0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Constant0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DOTDOT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DOTDOT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DOTDOT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Constant2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Constant2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Constant2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SubrangeType",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SubrangeType",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StructuredType ::= UnpackedType 
            {
                XMLElement RESULT;
		Location UnpackedType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location UnpackedType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object UnpackedType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredType",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredType",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StructuredType ::= PACKED UnpackedType 
            {
                XMLElement RESULT;
		Location PACKED0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PACKED0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PACKED0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location UnpackedType1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location UnpackedType1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object UnpackedType1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredType",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredType",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // UnpackedType ::= ArrayType 
            {
                XMLElement RESULT;
		Location ArrayType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ArrayType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ArrayType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnpackedType",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnpackedType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // UnpackedType ::= RecordType 
            {
                XMLElement RESULT;
		Location RecordType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RecordType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RecordType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnpackedType",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnpackedType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // UnpackedType ::= SetType 
            {
                XMLElement RESULT;
		Location SetType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SetType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SetType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnpackedType",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnpackedType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // UnpackedType ::= FileType 
            {
                XMLElement RESULT;
		Location FileType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location FileType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object FileType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnpackedType",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnpackedType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ArrayType ::= ARRAY LEFTSQ SimpleTypeList RIGHTSQ OF Type 
            {
                XMLElement RESULT;
		Location ARRAY0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ARRAY0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object ARRAY0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location LEFTSQ1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location LEFTSQ1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object LEFTSQ1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location SimpleTypeList2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location SimpleTypeList2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object SimpleTypeList2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location RIGHTSQ3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location RIGHTSQ3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object RIGHTSQ3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OF4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OF4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OF4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Type5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Type5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Type5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ArrayType",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayType",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SimpleTypeList ::= SimpleType 
            {
                XMLElement RESULT;
		Location SimpleType0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleType0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleType0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleTypeList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SimpleTypeList ::= SimpleTypeList COMMA SimpleType 
            {
                XMLElement RESULT;
		Location SimpleTypeList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleTypeList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleTypeList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SimpleType2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleType2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleType2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleTypeList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RecordType ::= RECORD FieldList END 
            {
                XMLElement RESULT;
		Location RECORD0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location RECORD0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object RECORD0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location FieldList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location FieldList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object FieldList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location END2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location END2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object END2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("RecordType",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecordType",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FieldList ::= FieldDeclList 
            {
                XMLElement RESULT;
		Location FieldDeclList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location FieldDeclList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object FieldDeclList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FieldList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldList",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FieldList ::= FieldDeclList SEMICOLON VariantFields 
            {
                XMLElement RESULT;
		Location FieldDeclList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location FieldDeclList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object FieldDeclList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location VariantFields2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location VariantFields2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object VariantFields2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FieldList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldList",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FieldDeclList ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("FieldDeclList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FieldDeclList ::= FieldDeclList SEMICOLON FieldDecl 
            {
                XMLElement RESULT;
		Location FieldDeclList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location FieldDeclList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object FieldDeclList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location FieldDecl2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location FieldDecl2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object FieldDecl2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FieldDeclList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FieldDecl ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("FieldDecl",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FieldDecl ::= IdentList COLON Type 
            {
                XMLElement RESULT;
		Location IdentList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IdentList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IdentList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Type2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Type2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Type2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FieldDecl",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VariantFields ::= CASE IDENT COLON IDENT OF VariantList 
            {
                XMLElement RESULT;
		Location CASE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location CASE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object CASE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location COLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location COLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object COLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location IDENT3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IDENT3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IDENT3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OF4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OF4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OF4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location VariantList5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location VariantList5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object VariantList5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariantFields",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariantFields",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VariantFields ::= CASE IDENT OF VariantList 
            {
                XMLElement RESULT;
		Location CASE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location CASE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object CASE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OF2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OF2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OF2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location VariantList3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location VariantList3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object VariantList3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariantFields",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariantFields",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VariantList ::= Variant 
            {
                XMLElement RESULT;
		Location Variant0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Variant0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Variant0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariantList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariantList",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VariantList ::= VariantList SEMICOLON Variant 
            {
                XMLElement RESULT;
		Location VariantList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location VariantList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object VariantList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Variant2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Variant2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Variant2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariantList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariantList",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Variant ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("Variant",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variant",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Variant ::= ConstantList COLON LEFT FieldList RIGHT 
            {
                XMLElement RESULT;
		Location ConstantList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ConstantList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object ConstantList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location FieldList3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location FieldList3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object FieldList3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Variant",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variant",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SetType ::= SET OF SimpleType 
            {
                XMLElement RESULT;
		Location SET0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SET0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SET0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OF1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SimpleType2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleType2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleType2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SetType",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SetType",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FileType ::= FILE OF Type 
            {
                XMLElement RESULT;
		Location FILE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location FILE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object FILE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OF1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Type2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Type2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Type2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FileType",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FileType",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PointerType ::= PTR IDENT 
            {
                XMLElement RESULT;
		Location PTR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PTR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PTR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("PointerType",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PointerType",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VarDeclOpt ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("VarDeclOpt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclOpt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VarDeclOpt ::= VarDecl 
            {
                XMLElement RESULT;
		Location VarDecl0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location VarDecl0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object VarDecl0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VarDeclOpt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclOpt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VarDecl ::= VAR VarDeclrList SEMICOLON 
            {
                XMLElement RESULT;
		Location VAR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location VAR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object VAR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location VarDeclrList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location VarDeclrList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object VarDeclrList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VarDecl",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VarDeclrList ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("VarDeclrList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclrList",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VarDeclrList ::= VarDeclrList SEMICOLON VarDeclr 
            {
                XMLElement RESULT;
		Location VarDeclrList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location VarDeclrList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object VarDeclrList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location VarDeclr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location VarDeclr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object VarDeclr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VarDeclrList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclrList",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VarDeclr ::= IdentList COLON Type 
            {
                XMLElement RESULT;
		Location IdentList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IdentList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IdentList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Type2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Type2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Type2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VarDeclr",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IdentList ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("IdentList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IdentList ::= IdentList COMMA IDENT 
            {
                XMLElement RESULT;
		Location IdentList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IdentList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IdentList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location IDENT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IDENT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IDENT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("IdentList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ProcDeclrList ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("ProcDeclrList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcDeclrList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ProcDeclrList ::= ProcDeclrList ProcDeclr SEMICOLON 
            {
                XMLElement RESULT;
		Location ProcDeclrList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ProcDeclrList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ProcDeclrList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ProcDeclr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ProcDeclr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ProcDeclr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProcDeclrList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcDeclrList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ProcDeclrList ::= ProcDeclrList FuncDeclr SEMICOLON 
            {
                XMLElement RESULT;
		Location ProcDeclrList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ProcDeclrList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ProcDeclrList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location FuncDeclr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location FuncDeclr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object FuncDeclr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProcDeclrList",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcDeclrList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ProcDeclr ::= ProcHeader Block 
            {
                XMLElement RESULT;
		Location ProcHeader0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ProcHeader0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ProcHeader0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Block1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Block1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Block1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProcDeclr",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcDeclr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FuncDeclr ::= FuncHeader Block 
            {
                XMLElement RESULT;
		Location FuncHeader0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location FuncHeader0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object FuncHeader0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Block1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Block1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Block1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FuncDeclr",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncDeclr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ProcHeader ::= PROCEDURE IDENT SEMICOLON 
            {
                XMLElement RESULT;
		Location PROCEDURE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location PROCEDURE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object PROCEDURE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProcHeader",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcHeader",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ProcHeader ::= PROCEDURE IDENT LEFT FormalParamDeclList RIGHT SEMICOLON 
            {
                XMLElement RESULT;
		Location PROCEDURE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location PROCEDURE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object PROCEDURE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location LEFT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location LEFT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object LEFT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location FormalParamDeclList3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location FormalParamDeclList3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object FormalParamDeclList3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location RIGHT4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location RIGHT4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object RIGHT4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ProcHeader",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcHeader",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FuncHeader ::= FUNCTION IDENT COLON IDENT SEMICOLON 
            {
                XMLElement RESULT;
		Location FUNCTION0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location FUNCTION0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object FUNCTION0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location COLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location COLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object COLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location IDENT3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location IDENT3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object IDENT3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FuncHeader",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncHeader",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FuncHeader ::= FUNCTION IDENT LEFT FormalParamDeclList RIGHT COLON IDENT SEMICOLON 
            {
                XMLElement RESULT;
		Location FUNCTION0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location FUNCTION0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		Object FUNCTION0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location LEFT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location LEFT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object LEFT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location FormalParamDeclList3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location FormalParamDeclList3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object FormalParamDeclList3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location RIGHT4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location RIGHT4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object RIGHT4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location COLON5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location COLON5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object COLON5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location IDENT6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location IDENT6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object IDENT6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SEMICOLON7xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SEMICOLON7xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SEMICOLON7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FuncHeader",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncHeader",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FormalParamDeclList ::= FormalParamDecl 
            {
                XMLElement RESULT;
		Location FormalParamDecl0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location FormalParamDecl0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object FormalParamDecl0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDeclList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDeclList",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FormalParamDeclList ::= FormalParamDeclList SEMICOLON FormalParamDecl 
            {
                XMLElement RESULT;
		Location FormalParamDeclList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location FormalParamDeclList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object FormalParamDeclList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location FormalParamDecl2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location FormalParamDecl2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object FormalParamDecl2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDeclList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDeclList",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FormalParamDecl ::= VAR IdentList COLON Type 
            {
                XMLElement RESULT;
		Location VAR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location VAR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object VAR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location IdentList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IdentList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IdentList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Type3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Type3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Type3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDecl",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FormalParamDecl ::= IdentList COLON Type 
            {
                XMLElement RESULT;
		Location IdentList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IdentList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IdentList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Type2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Type2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Type2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDecl",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FormalParamDecl ::= FUNCTION IdentList COLON Type 
            {
                XMLElement RESULT;
		Location FUNCTION0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location FUNCTION0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object FUNCTION0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location IdentList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location IdentList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object IdentList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Type3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Type3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Type3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDecl",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FormalParamDecl ::= PROCEDURE IdentList 
            {
                XMLElement RESULT;
		Location PROCEDURE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PROCEDURE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PROCEDURE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location IdentList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IdentList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IdentList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("FormalParamDecl",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stmt ::= UnlabelledStmt 
            {
                XMLElement RESULT;
		Location UnlabelledStmt0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location UnlabelledStmt0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object UnlabelledStmt0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stmt ::= INTCONST COLON UnlabelledStmt 
            {
                XMLElement RESULT;
		Location INTCONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location INTCONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object INTCONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location UnlabelledStmt2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location UnlabelledStmt2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object UnlabelledStmt2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Stmt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // UnlabelledStmt ::= SimpleStmt 
            {
                XMLElement RESULT;
		Location SimpleStmt0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleStmt0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleStmt0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnlabelledStmt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnlabelledStmt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // UnlabelledStmt ::= StructuredStmt 
            {
                XMLElement RESULT;
		Location StructuredStmt0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location StructuredStmt0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object StructuredStmt0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("UnlabelledStmt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnlabelledStmt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SimpleStmt ::= Variable ASSIGN Expr 
            {
                XMLElement RESULT;
		Location Variable0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Variable0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Variable0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ASSIGN1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ASSIGN1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ASSIGN1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SimpleStmt ::= Invocation 
            {
                XMLElement RESULT;
		Location Invocation0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Invocation0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Invocation0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SimpleStmt ::= WRITE LEFT WriteExprList RIGHT 
            {
                XMLElement RESULT;
		Location WRITE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location WRITE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object WRITE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location WriteExprList2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location WriteExprList2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object WriteExprList2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SimpleStmt ::= WRITELN LEFT WriteExprList RIGHT 
            {
                XMLElement RESULT;
		Location WRITELN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location WRITELN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object WRITELN0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location WriteExprList2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location WriteExprList2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object WriteExprList2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SimpleStmt ::= IDENT 
            {
                XMLElement RESULT;
		Location IDENT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IDENT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IDENT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",4);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SimpleStmt ::= GOTO INTCONST 
            {
                XMLElement RESULT;
		Location GOTO0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location GOTO0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object GOTO0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location INTCONST1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location INTCONST1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object INTCONST1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",5);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SimpleStmt ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("SimpleStmt",6);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // StructuredStmt ::= CompoundStmt 
            {
                XMLElement RESULT;
		Location CompoundStmt0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location CompoundStmt0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object CompoundStmt0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredStmt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // StructuredStmt ::= ConditionalStmt 
            {
                XMLElement RESULT;
		Location ConditionalStmt0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ConditionalStmt0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ConditionalStmt0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredStmt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // StructuredStmt ::= LoopStmt 
            {
                XMLElement RESULT;
		Location LoopStmt0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location LoopStmt0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object LoopStmt0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredStmt",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // StructuredStmt ::= WithStmt 
            {
                XMLElement RESULT;
		Location WithStmt0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location WithStmt0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object WithStmt0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StructuredStmt",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructuredStmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Variable ::= IDENT 
            {
                XMLElement RESULT;
		Location IDENT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IDENT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IDENT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Variable",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Variable ::= Variable LEFTSQ ExprList RIGHTSQ 
            {
                XMLElement RESULT;
		Location Variable0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location Variable0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object Variable0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFTSQ1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFTSQ1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFTSQ1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ExprList2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ExprList2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ExprList2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHTSQ3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHTSQ3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHTSQ3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Variable",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Variable ::= Variable DOT IDENT 
            {
                XMLElement RESULT;
		Location Variable0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Variable0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Variable0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DOT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DOT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DOT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location IDENT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location IDENT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object IDENT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Variable",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Variable ::= Variable PTR 
            {
                XMLElement RESULT;
		Location Variable0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location Variable0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object Variable0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location PTR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location PTR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object PTR1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Variable",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // WriteExprList ::= WriteExpr 
            {
                XMLElement RESULT;
		Location WriteExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location WriteExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object WriteExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WriteExprList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteExprList",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // WriteExprList ::= WriteExprList COMMA WriteExpr 
            {
                XMLElement RESULT;
		Location WriteExprList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location WriteExprList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object WriteExprList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location WriteExpr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location WriteExpr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object WriteExpr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WriteExprList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteExprList",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // WriteExpr ::= Expr 
            {
                XMLElement RESULT;
		Location Expr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Expr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Expr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WriteExpr",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteExpr",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // WriteExpr ::= Expr COLON Expr 
            {
                XMLElement RESULT;
		Location Expr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Expr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Expr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WriteExpr",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteExpr",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // WriteExpr ::= Expr COLON Expr COLON Expr 
            {
                XMLElement RESULT;
		Location Expr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location Expr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object Expr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location Expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Expr4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Expr4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Expr4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WriteExpr",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteExpr",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExprList ::= Expr 
            {
                XMLElement RESULT;
		Location Expr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Expr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Expr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ExprList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExprList ::= ExprList COMMA Expr 
            {
                XMLElement RESULT;
		Location ExprList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ExprList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ExprList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ExprList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expr ::= SimpleExpr 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Expr ::= SimpleExpr EQ SimpleExpr 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location EQ1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location EQ1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object EQ1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SimpleExpr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleExpr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleExpr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expr ::= SimpleExpr NE SimpleExpr 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location NE1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location NE1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object NE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SimpleExpr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleExpr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleExpr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expr ::= SimpleExpr LT SimpleExpr 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location LT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location LT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object LT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SimpleExpr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleExpr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleExpr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expr ::= SimpleExpr LE SimpleExpr 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location LE1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location LE1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object LE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SimpleExpr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleExpr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleExpr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",4);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expr ::= SimpleExpr GT SimpleExpr 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location GT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location GT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object GT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SimpleExpr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleExpr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleExpr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",5);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expr ::= SimpleExpr GE SimpleExpr 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location GE1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location GE1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object GE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SimpleExpr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleExpr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleExpr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",6);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expr ::= SimpleExpr IN SimpleExpr 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location IN1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location IN1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object IN1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location SimpleExpr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location SimpleExpr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object SimpleExpr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Expr",7);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SimpleExpr ::= Term 
            {
                XMLElement RESULT;
		Location Term0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Term0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Term0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SimpleExpr ::= PLUS Term 
            {
                XMLElement RESULT;
		Location PLUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PLUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PLUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Term1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Term1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Term1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SimpleExpr ::= MINUS Term 
            {
                XMLElement RESULT;
		Location MINUS0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MINUS0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MINUS0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Term1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Term1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Term1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SimpleExpr ::= SimpleExpr PLUS Term 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location PLUS1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location PLUS1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object PLUS1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Term2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Term2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Term2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SimpleExpr ::= SimpleExpr MINUS Term 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location MINUS1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MINUS1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MINUS1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Term2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Term2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Term2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",4);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SimpleExpr ::= SimpleExpr OR Term 
            {
                XMLElement RESULT;
		Location SimpleExpr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location SimpleExpr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object SimpleExpr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location OR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location OR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object OR1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Term2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Term2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Term2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("SimpleExpr",5);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Term ::= Factor 
            {
                XMLElement RESULT;
		Location Factor0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Factor0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Factor0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Term ::= Term TIMES Factor 
            {
                XMLElement RESULT;
		Location Term0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Term0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Term0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location TIMES1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location TIMES1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object TIMES1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Factor2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Factor2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Factor2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Term ::= Term DIVIDE Factor 
            {
                XMLElement RESULT;
		Location Term0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Term0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Term0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DIVIDE1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DIVIDE1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DIVIDE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Factor2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Factor2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Factor2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Term ::= Term DIV Factor 
            {
                XMLElement RESULT;
		Location Term0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Term0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Term0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DIV1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DIV1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DIV1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Factor2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Factor2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Factor2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Term ::= Term MOD Factor 
            {
                XMLElement RESULT;
		Location Term0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Term0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Term0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location MOD1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location MOD1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object MOD1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Factor2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Factor2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Factor2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",4);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Term ::= Term AND Factor 
            {
                XMLElement RESULT;
		Location Term0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Term0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Term0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location AND1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location AND1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object AND1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Factor2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Factor2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Factor2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Term",5);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Factor ::= Variable 
            {
                XMLElement RESULT;
		Location Variable0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Variable0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Variable0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Factor ::= BOOLCONST 
            {
                XMLElement RESULT;
		Location BOOLCONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location BOOLCONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object BOOLCONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Factor ::= INTCONST 
            {
                XMLElement RESULT;
		Location INTCONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location INTCONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object INTCONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Factor ::= REALCONST 
            {
                XMLElement RESULT;
		Location REALCONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location REALCONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object REALCONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Factor ::= CHARCONST 
            {
                XMLElement RESULT;
		Location CHARCONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location CHARCONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object CHARCONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",4);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Factor ::= STRINGCONST 
            {
                XMLElement RESULT;
		Location STRINGCONST0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location STRINGCONST0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object STRINGCONST0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",5);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Factor ::= NIL 
            {
                XMLElement RESULT;
		Location NIL0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location NIL0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object NIL0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",6);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Factor ::= LEFT Expr RIGHT 
            {
                XMLElement RESULT;
		Location LEFT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location Expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location Expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object Expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",7);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Factor ::= Invocation 
            {
                XMLElement RESULT;
		Location Invocation0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Invocation0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Invocation0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",8);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Factor ::= Set 
            {
                XMLElement RESULT;
		Location Set0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Set0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Set0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",9);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Factor ::= NOT Factor 
            {
                XMLElement RESULT;
		Location NOT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location NOT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object NOT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Factor1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Factor1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Factor1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Factor",10);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Invocation ::= IDENT LEFT ExprList RIGHT 
            {
                XMLElement RESULT;
		Location IDENT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location IDENT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object IDENT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location LEFT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ExprList2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ExprList2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ExprList2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHT3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHT3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHT3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Invocation",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Invocation",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Set ::= LEFTSQ ElementList RIGHTSQ 
            {
                XMLElement RESULT;
		Location LEFTSQ0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location LEFTSQ0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object LEFTSQ0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ElementList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ElementList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ElementList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHTSQ2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHTSQ2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHTSQ2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Set",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Set",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Set ::= LEFTSQ RIGHTSQ 
            {
                XMLElement RESULT;
		Location LEFTSQ0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location LEFTSQ0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object LEFTSQ0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location RIGHTSQ1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location RIGHTSQ1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object RIGHTSQ1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Set",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Set",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ElementList ::= Element 
            {
                XMLElement RESULT;
		Location Element0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Element0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Element0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ElementList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ElementList ::= ElementList COMMA Element 
            {
                XMLElement RESULT;
		Location ElementList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ElementList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ElementList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Element2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Element2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Element2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ElementList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Element ::= Expr 
            {
                XMLElement RESULT;
		Location Expr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Expr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Expr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Element",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Element ::= Expr DOTDOT Expr 
            {
                XMLElement RESULT;
		Location Expr0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Expr0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Expr0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DOTDOT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DOTDOT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DOTDOT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("Element",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CompoundStmt ::= BEGIN StmtList END 
            {
                XMLElement RESULT;
		Location BEGIN0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location BEGIN0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object BEGIN0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location StmtList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location StmtList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object StmtList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location END2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location END2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object END2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("CompoundStmt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompoundStmt",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // StmtList ::= Stmt 
            {
                XMLElement RESULT;
		Location Stmt0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Stmt0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Stmt0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StmtList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // StmtList ::= StmtList SEMICOLON Stmt 
            {
                XMLElement RESULT;
		Location StmtList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location StmtList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object StmtList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Stmt2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Stmt2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Stmt2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("StmtList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ConditionalStmt ::= IF Expr THEN Stmt 
            {
                XMLElement RESULT;
		Location IF0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location IF0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object IF0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location Expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location THEN2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location THEN2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object THEN2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Stmt3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Stmt3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Stmt3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConditionalStmt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalStmt",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ConditionalStmt ::= IF Expr THEN Stmt ELSE Stmt 
            {
                XMLElement RESULT;
		Location IF0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location IF0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object IF0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location Expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location Expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object Expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location THEN2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location THEN2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object THEN2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location Stmt3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Stmt3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Stmt3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ELSE4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ELSE4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ELSE4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Stmt5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Stmt5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Stmt5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConditionalStmt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalStmt",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ConditionalStmt ::= CASE Expr OF CaseStmtList END 
            {
                XMLElement RESULT;
		Location CASE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location CASE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object CASE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location Expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location Expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object Expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location OF2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location OF2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object OF2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location CaseStmtList3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location CaseStmtList3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object CaseStmtList3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location END4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location END4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object END4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("ConditionalStmt",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalStmt",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CaseStmtList ::= CaseStmt 
            {
                XMLElement RESULT;
		Location CaseStmt0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location CaseStmt0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object CaseStmt0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("CaseStmtList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseStmtList",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CaseStmtList ::= CaseStmtList SEMICOLON CaseStmt 
            {
                XMLElement RESULT;
		Location CaseStmtList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location CaseStmtList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object CaseStmtList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location SEMICOLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location SEMICOLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object SEMICOLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location CaseStmt2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location CaseStmt2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object CaseStmt2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("CaseStmtList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseStmtList",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CaseStmt ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("CaseStmt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseStmt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CaseStmt ::= ConstantList COLON Stmt 
            {
                XMLElement RESULT;
		Location ConstantList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ConstantList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ConstantList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COLON1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COLON1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COLON1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Stmt2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Stmt2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Stmt2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("CaseStmt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseStmt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LoopStmt ::= WHILE Expr DO Stmt 
            {
                XMLElement RESULT;
		Location WHILE0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location WHILE0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object WHILE0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location Expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DO2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DO2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DO2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Stmt3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Stmt3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Stmt3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LoopStmt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopStmt",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LoopStmt ::= REPEAT StmtList UNTIL Expr 
            {
                XMLElement RESULT;
		Location REPEAT0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location REPEAT0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object REPEAT0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location StmtList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location StmtList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object StmtList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location UNTIL2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location UNTIL2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object UNTIL2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Expr3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Expr3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Expr3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LoopStmt",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopStmt",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LoopStmt ::= FOR IDENT ASSIGN Expr TO Expr DO Stmt 
            {
                XMLElement RESULT;
		Location FOR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location FOR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		Object FOR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location ASSIGN2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ASSIGN2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object ASSIGN2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location Expr3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location Expr3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object Expr3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location TO4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location TO4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object TO4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location Expr5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Expr5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Expr5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DO6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DO6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DO6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Stmt7xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Stmt7xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Stmt7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LoopStmt",2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopStmt",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // LoopStmt ::= FOR IDENT ASSIGN Expr DOWNTO Expr DO Stmt 
            {
                XMLElement RESULT;
		Location FOR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location FOR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		Object FOR0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location IDENT1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location IDENT1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object IDENT1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location ASSIGN2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ASSIGN2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object ASSIGN2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location Expr3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location Expr3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object Expr3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location DOWNTO4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location DOWNTO4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object DOWNTO4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location Expr5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location Expr5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object Expr5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DO6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DO6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DO6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Stmt7xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Stmt7xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Stmt7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("LoopStmt",3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopStmt",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // WithStmt ::= WITH VariableList DO Stmt 
            {
                XMLElement RESULT;
		Location WITH0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location WITH0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object WITH0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location VariableList1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location VariableList1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object VariableList1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location DO2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location DO2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object DO2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Stmt3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Stmt3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Stmt3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("WithStmt",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WithStmt",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VariableList ::= Variable 
            {
                XMLElement RESULT;
		Location Variable0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Variable0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Variable0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariableList",0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableList",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VariableList ::= VariableList COMMA Variable 
            {
                XMLElement RESULT;
		Location VariableList0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location VariableList0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object VariableList0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location COMMA1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location COMMA1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object COMMA1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location Variable2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location Variable2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object Variable2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("VariableList",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableList",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

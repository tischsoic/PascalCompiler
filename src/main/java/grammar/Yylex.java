/* The following code was generated by JFlex 1.6.0 */

package grammar;

import java.io.*;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>pascal.jflex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\66\1\66\1\3\22\0\1\1\3\0\1\16"+
    "\2\0\1\17\1\46\1\47\1\60\1\57\1\54\1\13\1\14\1\61"+
    "\1\4\7\6\2\5\1\52\1\53\1\62\1\56\1\63\2\0\3\10"+
    "\1\15\1\12\1\15\5\16\1\11\13\16\1\7\2\16\1\50\1\0"+
    "\1\51\1\55\1\16\1\0\1\20\1\25\1\31\1\22\1\26\1\40"+
    "\1\27\1\45\1\30\1\16\1\44\1\37\1\42\1\21\1\33\1\43"+
    "\1\16\1\23\1\32\1\34\1\41\1\35\1\36\1\7\1\24\1\16"+
    "\1\64\1\0\1\65\7\0\1\66\u1fa2\0\1\66\1\66\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\5\1\6\1\7"+
    "\1\1\23\5\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\1\1\4\2\0\1\4\1\0\2\26\1\27\1\0"+
    "\1\30\5\5\1\31\5\5\1\32\1\33\3\5\1\34"+
    "\1\35\2\5\1\36\16\5\1\0\1\37\1\40\1\41"+
    "\1\42\1\0\1\4\1\26\2\0\1\43\1\44\1\5"+
    "\1\45\1\46\1\47\5\5\1\50\4\5\1\51\3\5"+
    "\1\52\6\5\1\53\2\5\1\54\2\5\1\0\1\30"+
    "\2\5\1\55\3\5\1\56\1\57\1\60\1\5\1\61"+
    "\1\62\1\63\1\5\1\64\2\5\1\65\5\5\1\66"+
    "\4\5\1\67\1\70\1\71\1\72\1\73\1\5\1\74"+
    "\3\5\1\75\1\76\1\77\1\100\2\5\1\101\2\5"+
    "\1\102\1\5\1\103\1\5\1\104\1\5\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\67\0\156\0\245\0\334\0\u0113"+
    "\0\67\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\67"+
    "\0\67\0\67\0\u0604\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\67\0\u0785\0\u07bc\0\67\0\67\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0113\0\u0113\0\u0abe\0\u0af5\0\u0b2c\0\u0113"+
    "\0\u0113\0\u0b63\0\u0b9a\0\u0113\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\67\0\67\0\67\0\67\0\u06a9"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u0113\0\u101d\0\u0113"+
    "\0\u0113\0\u0113\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u0113"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u0113\0\u1243\0\u127a\0\u12b1"+
    "\0\u0113\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u0113"+
    "\0\u1432\0\u1469\0\u0113\0\u14a0\0\u14d7\0\u150e\0\u0fe6\0\u1545"+
    "\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u0113\0\u0113\0\u0113"+
    "\0\u168f\0\u0113\0\u0113\0\u0113\0\u16c6\0\u0113\0\u16fd\0\u1734"+
    "\0\u0113\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u0113\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u0113\0\u0113\0\u195a\0\u0113\0\u0113"+
    "\0\u1991\0\u0113\0\u19c8\0\u19ff\0\u1a36\0\u0113\0\u0113\0\u0113"+
    "\0\u0113\0\u1a6d\0\u1aa4\0\u0113\0\u1adb\0\u1b12\0\u0113\0\u1b49"+
    "\0\u0113\0\u1b80\0\u0113\0\u1bb7\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\4\10\1\11"+
    "\1\12\2\10\1\13\1\14\1\15\1\16\1\17\1\10"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\2\10"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\2"+
    "\72\0\1\4\70\0\1\56\1\57\1\56\1\60\1\0"+
    "\1\61\1\62\1\0\1\63\1\64\4\0\1\64\3\0"+
    "\1\62\10\0\1\61\1\64\32\0\3\7\2\0\1\61"+
    "\1\62\1\0\1\63\1\64\4\0\1\64\3\0\1\62"+
    "\10\0\1\61\1\64\32\0\7\10\2\0\2\10\1\0"+
    "\26\10\25\0\3\63\5\0\1\65\52\0\17\66\1\67"+
    "\47\66\4\0\7\10\2\0\2\10\1\0\1\10\1\70"+
    "\1\10\1\71\22\10\25\0\7\10\2\0\2\10\1\0"+
    "\10\10\1\72\2\10\1\73\12\10\25\0\7\10\2\0"+
    "\2\10\1\0\10\10\1\74\2\10\1\75\12\10\25\0"+
    "\7\10\2\0\2\10\1\0\6\10\1\76\17\10\25\0"+
    "\7\10\2\0\2\10\1\0\6\10\1\77\17\10\25\0"+
    "\7\10\2\0\2\10\1\0\1\10\1\100\15\10\1\101"+
    "\6\10\25\0\7\10\2\0\2\10\1\0\13\10\1\102"+
    "\12\10\25\0\7\10\2\0\2\10\1\0\1\10\1\103"+
    "\16\10\1\104\5\10\25\0\7\10\2\0\2\10\1\0"+
    "\1\105\12\10\1\106\12\10\25\0\7\10\2\0\2\10"+
    "\1\0\6\10\1\107\17\10\25\0\7\10\2\0\2\10"+
    "\1\0\3\10\1\110\14\10\1\111\5\10\25\0\7\10"+
    "\2\0\2\10\1\0\3\10\1\112\1\113\6\10\1\114"+
    "\11\10\1\115\25\0\7\10\2\0\2\10\1\0\1\116"+
    "\25\10\25\0\7\10\2\0\2\10\1\0\3\10\1\117"+
    "\4\10\1\120\14\10\1\121\25\0\7\10\2\0\2\10"+
    "\1\0\1\122\25\10\25\0\7\10\2\0\2\10\1\0"+
    "\1\123\7\10\1\124\2\10\1\125\5\10\1\126\4\10"+
    "\25\0\7\10\2\0\2\10\1\0\1\10\1\127\24\10"+
    "\25\0\7\10\2\0\2\10\1\0\13\10\1\130\12\10"+
    "\25\0\7\10\2\0\2\10\1\0\1\131\2\10\1\132"+
    "\22\10\101\0\1\133\64\0\1\134\66\0\1\135\4\0"+
    "\1\136\61\0\1\137\10\0\65\140\1\3\1\140\4\0"+
    "\1\56\1\57\1\56\2\0\1\61\1\62\1\0\1\63"+
    "\1\64\4\0\1\64\3\0\1\62\10\0\1\61\1\64"+
    "\32\0\3\57\3\0\1\62\1\0\1\63\1\64\4\0"+
    "\1\64\3\0\1\62\11\0\1\64\32\0\3\141\1\0"+
    "\1\141\1\0\1\141\2\0\1\141\2\0\1\141\1\0"+
    "\1\141\2\0\2\141\2\0\1\141\6\0\1\141\32\0"+
    "\3\142\4\0\1\143\43\0\1\143\13\0\3\63\3\0"+
    "\1\62\2\0\1\64\4\0\1\64\3\0\1\62\11\0"+
    "\1\64\26\0\17\144\1\145\47\144\17\0\1\66\53\0"+
    "\7\10\2\0\2\10\1\0\2\10\1\146\23\10\25\0"+
    "\7\10\2\0\2\10\1\0\3\10\1\147\22\10\25\0"+
    "\7\10\2\0\2\10\1\0\17\10\1\150\6\10\25\0"+
    "\7\10\2\0\2\10\1\0\14\10\1\151\11\10\25\0"+
    "\7\10\2\0\2\10\1\0\15\10\1\152\10\10\25\0"+
    "\7\10\2\0\2\10\1\0\16\10\1\153\7\10\25\0"+
    "\7\10\2\0\2\10\1\0\1\154\10\10\1\155\11\10"+
    "\1\156\2\10\25\0\7\10\2\0\2\10\1\0\7\10"+
    "\1\157\16\10\25\0\7\10\2\0\2\10\1\0\2\10"+
    "\1\160\23\10\25\0\7\10\2\0\2\10\1\0\12\10"+
    "\1\161\13\10\25\0\7\10\2\0\2\10\1\0\14\10"+
    "\1\162\11\10\25\0\7\10\2\0\2\10\1\0\12\10"+
    "\1\163\13\10\25\0\7\10\2\0\2\10\1\0\1\10"+
    "\1\164\24\10\25\0\7\10\2\0\2\10\1\0\14\10"+
    "\1\165\11\10\25\0\7\10\2\0\2\10\1\0\21\10"+
    "\1\166\4\10\25\0\7\10\2\0\2\10\1\0\23\10"+
    "\1\167\2\10\25\0\7\10\2\0\2\10\1\0\6\10"+
    "\1\170\17\10\25\0\7\10\2\0\2\10\1\0\3\10"+
    "\1\171\22\10\25\0\7\10\2\0\2\10\1\0\10\10"+
    "\1\172\15\10\25\0\7\10\2\0\2\10\1\0\14\10"+
    "\1\173\11\10\25\0\7\10\2\0\2\10\1\0\10\10"+
    "\1\174\15\10\25\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\175\20\10\25\0\7\10\2\0\2\10\1\0\17\10"+
    "\1\176\6\10\25\0\7\10\2\0\2\10\1\0\17\10"+
    "\1\177\6\10\25\0\7\10\2\0\2\10\1\0\3\10"+
    "\1\200\22\10\25\0\7\10\2\0\2\10\1\0\1\10"+
    "\1\201\24\10\25\0\7\10\2\0\2\10\1\0\14\10"+
    "\1\202\11\10\25\0\7\10\2\0\2\10\1\0\2\10"+
    "\1\203\23\10\25\0\7\10\2\0\2\10\1\0\11\10"+
    "\1\204\14\10\25\0\7\10\2\0\2\10\1\0\13\10"+
    "\1\205\12\10\21\0\60\133\1\206\6\133\4\0\3\141"+
    "\1\0\1\141\1\61\1\141\2\0\1\141\2\0\1\141"+
    "\1\0\1\141\2\0\2\141\2\0\1\141\5\0\1\61"+
    "\1\141\32\0\3\142\6\0\1\64\4\0\1\64\15\0"+
    "\1\64\32\0\3\142\60\0\17\144\1\207\47\144\17\0"+
    "\1\144\53\0\7\10\2\0\2\10\1\0\1\210\25\10"+
    "\25\0\7\10\2\0\2\10\1\0\1\10\1\211\24\10"+
    "\25\0\7\10\2\0\2\10\1\0\2\10\1\212\23\10"+
    "\25\0\7\10\2\0\2\10\1\0\13\10\1\213\12\10"+
    "\25\0\7\10\2\0\2\10\1\0\6\10\1\214\17\10"+
    "\25\0\7\10\2\0\2\10\1\0\10\10\1\215\15\10"+
    "\25\0\7\10\2\0\2\10\1\0\6\10\1\216\17\10"+
    "\25\0\7\10\2\0\2\10\1\0\13\10\1\217\12\10"+
    "\25\0\7\10\2\0\2\10\1\0\6\10\1\220\17\10"+
    "\25\0\7\10\2\0\2\10\1\0\12\10\1\221\13\10"+
    "\25\0\7\10\2\0\2\10\1\0\6\10\1\222\17\10"+
    "\25\0\7\10\2\0\2\10\1\0\6\10\1\223\17\10"+
    "\25\0\7\10\2\0\2\10\1\0\1\10\1\224\24\10"+
    "\25\0\7\10\2\0\2\10\1\0\14\10\1\225\11\10"+
    "\25\0\7\10\2\0\2\10\1\0\25\10\1\226\25\0"+
    "\7\10\2\0\2\10\1\0\17\10\1\227\6\10\25\0"+
    "\7\10\2\0\2\10\1\0\6\10\1\230\17\10\25\0"+
    "\7\10\2\0\2\10\1\0\12\10\1\166\13\10\25\0"+
    "\7\10\2\0\2\10\1\0\6\10\1\231\17\10\25\0"+
    "\7\10\2\0\2\10\1\0\11\10\1\232\14\10\25\0"+
    "\7\10\2\0\2\10\1\0\10\10\1\233\15\10\25\0"+
    "\7\10\2\0\2\10\1\0\24\10\1\234\1\10\25\0"+
    "\7\10\2\0\2\10\1\0\7\10\1\235\1\10\1\236"+
    "\14\10\21\0\47\133\1\3\10\133\1\206\6\133\4\0"+
    "\7\10\2\0\2\10\1\0\4\10\1\237\21\10\25\0"+
    "\7\10\2\0\2\10\1\0\14\10\1\240\11\10\25\0"+
    "\7\10\2\0\2\10\1\0\17\10\1\241\6\10\25\0"+
    "\7\10\2\0\2\10\1\0\3\10\1\242\22\10\25\0"+
    "\7\10\2\0\2\10\1\0\1\243\25\10\25\0\7\10"+
    "\2\0\2\10\1\0\1\10\1\244\24\10\25\0\7\10"+
    "\2\0\2\10\1\0\14\10\1\245\11\10\25\0\7\10"+
    "\2\0\2\10\1\0\6\10\1\246\17\10\25\0\7\10"+
    "\2\0\2\10\1\0\6\10\1\247\17\10\25\0\7\10"+
    "\2\0\2\10\1\0\17\10\1\250\6\10\25\0\7\10"+
    "\2\0\2\10\1\0\14\10\1\251\11\10\25\0\7\10"+
    "\2\0\2\10\1\0\17\10\1\252\6\10\25\0\7\10"+
    "\2\0\2\10\1\0\6\10\1\253\17\10\25\0\7\10"+
    "\2\0\2\10\1\0\3\10\1\254\22\10\25\0\7\10"+
    "\2\0\2\10\1\0\6\10\1\255\17\10\25\0\7\10"+
    "\2\0\2\10\1\0\13\10\1\256\12\10\25\0\7\10"+
    "\2\0\2\10\1\0\1\10\1\257\24\10\25\0\7\10"+
    "\2\0\2\10\1\0\2\10\1\260\23\10\25\0\7\10"+
    "\2\0\2\10\1\0\14\10\1\261\11\10\25\0\7\10"+
    "\2\0\2\10\1\0\17\10\1\262\6\10\25\0\7\10"+
    "\2\0\2\10\1\0\10\10\1\263\15\10\25\0\7\10"+
    "\2\0\2\10\1\0\2\10\1\264\23\10\25\0\7\10"+
    "\2\0\2\10\1\0\1\265\25\10\25\0\7\10\2\0"+
    "\2\10\1\0\2\10\1\266\23\10\25\0\7\10\2\0"+
    "\2\10\1\0\1\10\1\267\24\10\25\0\7\10\2\0"+
    "\2\10\1\0\13\10\1\270\12\10\25\0\7\10\2\0"+
    "\2\10\1\0\22\10\1\271\3\10\25\0\7\10\2\0"+
    "\2\10\1\0\21\10\1\272\4\10\25\0\7\10\2\0"+
    "\2\10\1\0\1\10\1\273\24\10\25\0\7\10\2\0"+
    "\2\10\1\0\3\10\1\274\22\10\25\0\7\10\2\0"+
    "\2\10\1\0\6\10\1\275\17\10\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\4\1\1\11\26\1\3\11\1\1\7\11"+
    "\4\1\2\0\1\11\1\0\1\1\2\11\1\0\44\1"+
    "\1\0\4\11\1\0\2\1\2\0\41\1\1\0\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private int lineNumber = 1;
	public int lineNumber() { return lineNumber; }
	
	public Symbol token( int tokenType ) {
		System.err.println( "Obtain token " + sym.terminal_name( tokenType ) 
			+ " \"" + yytext() + "\"" );
		return new Symbol( tokenType, yychar, yychar + yytext().length(), yytext() );
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return token( sym.error );
          }
        case 70: break;
        case 2: 
          { 
          }
        case 71: break;
        case 3: 
          { lineNumber++;
          }
        case 72: break;
        case 4: 
          { return token( sym.INTCONST );
          }
        case 73: break;
        case 5: 
          { return token( sym.IDENT );
          }
        case 74: break;
        case 6: 
          { return token( sym.MINUS );
          }
        case 75: break;
        case 7: 
          { return token( sym.DOT );
          }
        case 76: break;
        case 8: 
          { return token( sym.LEFT );
          }
        case 77: break;
        case 9: 
          { return token( sym.RIGHT );
          }
        case 78: break;
        case 10: 
          { return token( sym.LEFTSQ );
          }
        case 79: break;
        case 11: 
          { return token( sym.RIGHTSQ );
          }
        case 80: break;
        case 12: 
          { return token( sym.COLON );
          }
        case 81: break;
        case 13: 
          { return token( sym.SEMICOLON );
          }
        case 82: break;
        case 14: 
          { return token( sym.COMMA );
          }
        case 83: break;
        case 15: 
          { return token( sym.PTR );
          }
        case 84: break;
        case 16: 
          { return token( sym.EQ );
          }
        case 85: break;
        case 17: 
          { return token( sym.PLUS );
          }
        case 86: break;
        case 18: 
          { return token( sym.TIMES );
          }
        case 87: break;
        case 19: 
          { return token( sym.DIVIDE );
          }
        case 88: break;
        case 20: 
          { return token( sym.LT );
          }
        case 89: break;
        case 21: 
          { return token( sym.GT );
          }
        case 90: break;
        case 22: 
          { return token( sym.REALCONST );
          }
        case 91: break;
        case 23: 
          { return token( sym.DOTDOT );
          }
        case 92: break;
        case 24: 
          { return token( sym.STRINGCONST );
          }
        case 93: break;
        case 25: 
          { return token( sym.DO );
          }
        case 94: break;
        case 26: 
          { return token( sym.IN );
          }
        case 95: break;
        case 27: 
          { return token( sym.IF );
          }
        case 96: break;
        case 28: 
          { return token( sym.OR );
          }
        case 97: break;
        case 29: 
          { return token( sym.OF );
          }
        case 98: break;
        case 30: 
          { return token( sym.TO );
          }
        case 99: break;
        case 31: 
          { return token( sym.ASSIGN );
          }
        case 100: break;
        case 32: 
          { return token( sym.LE );
          }
        case 101: break;
        case 33: 
          { return token( sym.NE );
          }
        case 102: break;
        case 34: 
          { return token( sym.GE );
          }
        case 103: break;
        case 35: 
          { return token( sym.CHARCONST );
          }
        case 104: break;
        case 36: 
          { return token( sym.AND );
          }
        case 105: break;
        case 37: 
          { return token( sym.NIL );
          }
        case 106: break;
        case 38: 
          { return token( sym.NOT );
          }
        case 107: break;
        case 39: 
          { return token( sym.DIV );
          }
        case 108: break;
        case 40: 
          { return token( sym.END );
          }
        case 109: break;
        case 41: 
          { return token( sym.SET );
          }
        case 110: break;
        case 42: 
          { return token( sym.VAR );
          }
        case 111: break;
        case 43: 
          { return token( sym.FOR );
          }
        case 112: break;
        case 44: 
          { return token( sym.MOD );
          }
        case 113: break;
        case 45: 
          { return token( sym.READ );
          }
        case 114: break;
        case 46: 
          { return token( sym.ELSE );
          }
        case 115: break;
        case 47: 
          { return token( sym.GOTO );
          }
        case 116: break;
        case 48: 
          { return token( sym.CASE );
          }
        case 117: break;
        case 49: 
          { return token( sym.BOOLCONST );
          }
        case 118: break;
        case 50: 
          { return token( sym.TYPE );
          }
        case 119: break;
        case 51: 
          { return token( sym.THEN );
          }
        case 120: break;
        case 52: 
          { return token( sym.WITH );
          }
        case 121: break;
        case 53: 
          { return token( sym.FILE );
          }
        case 122: break;
        case 54: 
          { return token( sym.ARRAY );
          }
        case 123: break;
        case 55: 
          { return token( sym.BEGIN );
          }
        case 124: break;
        case 56: 
          { return token( sym.CONST );
          }
        case 125: break;
        case 57: 
          { return token( sym.WRITE );
          }
        case 126: break;
        case 58: 
          { return token( sym.WHILE );
          }
        case 127: break;
        case 59: 
          { return token( sym.LABEL );
          }
        case 128: break;
        case 60: 
          { return token( sym.UNTIL );
          }
        case 129: break;
        case 61: 
          { return token( sym.DOWNTO );
          }
        case 130: break;
        case 62: 
          { return token( sym.READLN );
          }
        case 131: break;
        case 63: 
          { return token( sym.RECORD );
          }
        case 132: break;
        case 64: 
          { return token( sym.REPEAT );
          }
        case 133: break;
        case 65: 
          { return token( sym.PACKED );
          }
        case 134: break;
        case 66: 
          { return token( sym.WRITELN );
          }
        case 135: break;
        case 67: 
          { return token( sym.PROGRAM );
          }
        case 136: break;
        case 68: 
          { return token( sym.FUNCTION );
          }
        case 137: break;
        case 69: 
          { return token( sym.PROCEDURE );
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return token( sym.EOF );
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
